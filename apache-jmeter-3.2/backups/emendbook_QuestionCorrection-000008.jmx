<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(host,dev2.zhishinet.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1501750900000</longProp>
        <longProp name="ThreadGroup.end_time">1501750900000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${__V(${type} ${token})}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">443</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">https</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="basepath_teacher" elementType="Argument">
              <stringProp name="Argument.name">basepath_teacher</stringProp>
              <stringProp name="Argument.value">api/teacher/v1/sec</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="basepath_homework" elementType="Argument">
              <stringProp name="Argument.name">basepath_homework</stringProp>
              <stringProp name="Argument.value">api/homework/v1/sec</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="basepath_emend" elementType="Argument">
              <stringProp name="Argument.name">basepath_emend</stringProp>
              <stringProp name="Argument.value">api/emend/v1/sec</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="basepath_appstudent" elementType="Argument">
              <stringProp name="Argument.name">basepath_appstudent</stringProp>
              <stringProp name="Argument.value">api/app-student/v1/sec</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="basepath_homepageapi" elementType="Argument">
              <stringProp name="Argument.name">basepath_homepageapi</stringProp>
              <stringProp name="Argument.value">api/HomePageAPI</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="basepath_sys" elementType="Argument">
              <stringProp name="Argument.name">basepath_sys</stringProp>
              <stringProp name="Argument.value">api/sys/v1/sec</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="basepath_subsystem" elementType="Argument">
              <stringProp name="Argument.name">basepath_subsystem</stringProp>
              <stringProp name="Argument.value">api/subsystem/homework/v1/sec</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var host = &quot;${host}&quot;;
if (host == &quot;test.zhishinet.com&quot;){ 
vars.put(&quot;username&quot;, &quot;sh000124&quot;);
vars.put(&quot;passwd&quot;, &quot;welcome3&quot;);}
else if (host == &quot;dev.zhishinet.com&quot;){
vars.put(&quot;username&quot;, &quot;sh000124&quot;);
vars.put(&quot;passwd&quot;, &quot;welcome3&quot;);
}else if (host == &quot;staging.zhishinet.com&quot;){
vars.put(&quot;username&quot;,&quot;sh000124&quot;);
vars.put(&quot;passwd&quot;, &quot;welcome123&quot;);
}else if (host == &quot;dev2.zhishinet.com&quot;){
vars.put(&quot;username&quot;,&quot;sh000124&quot;);
vars.put(&quot;passwd&quot;, &quot;welcome3&quot;);
}
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取用户认证" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="-1756729749">获取用户认证</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
          <stringProp name="IfController.condition">${userId} != &quot;&quot; || ${userId} != undefined</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="进入作业中心" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="625093108">作业中心</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="点击待订正" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="83913453">作业中心-待订正</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
            <stringProp name="IfController.condition">&quot;QuestionCategorys&quot; != &quot;&quot; </stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="点击去订正" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="1874794822">作业中心-成绩报告-去订正</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="点击开始" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="258645170">作业中心-成绩报告-去订正-开始</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="点击查看答案" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-1709691403">作业中心-成绩报告-去订正-开始-查看答案</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="点击强化练习" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-1877307151">作业中心-成绩报告-去订正-开始-查看答案-强化练习</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="点击提交" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-2087318736">作业中心-成绩报告-去订正-开始-查看答案-强化练习-提交</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="返回作业中心查看状态" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="625093108">作业中心</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取用户认证" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;: &quot;${username}&quot;,&#xd;
	&quot;password&quot;: &quot;${passwd}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/zauth/v1/token/access</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="type" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">type</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token_type&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getuser-获取用户信息" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_appstudent}/users/student</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取userId" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取默认课本Id
if(response.ubuserId != &quot;&quot;){
	var userId = response.ubuserId;
	log.info(&quot;用户Id为：&quot; + userId)
	vars.put(&quot;userId&quot;, userId);
}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.ubuserId != &quot;&quot;){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业中心" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/homework/v1/sec/getUserClasses" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="timestamp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1505288245153</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">timestamp</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_homework}/getUserClasses</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static_res/pages/StaticPages/adPictures.json" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.zhishinet.com</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/static_res/pages/StaticPages/adPictures.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/HomePageAPI/IsHaveNewBieTask" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_homepageapi}/IsHaveNewBieTask</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/HomePageAPI/GetUserHomeworkPerformance" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_homepageapi}/GetUserHomeworkPerformance</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取assessmentId" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">assessmentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;AssessmentId&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;SessionUserTrackingId&quot;:(.+?)}</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/app/MicroVideo-service/rest/v1/sec/videos/recommend" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="roleTypeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">roleTypeId</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/app/MicroVideo-service/rest/v1/sec/videos/recommend</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/HomePageAPI/GetNewPrizeList" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_homepageapi}/GetNewPrizeList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/HomePageAPI/GetUserRewardInfo" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_homepageapi}/GetUserRewardInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/HomePageAPI/GetClassExperienceRankList" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_homepageapi}/GetClassExperienceRankList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static_res/pages/StudentClient/www/index-pc.html#/1/myHomePage/mainPage/homeWork" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.zhishinet.com</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/static_res/pages/StudentClient/www/index-pc.html#/1/myHomePage/mainPage/homeWork</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/sys/v1/sec/selectDefaultQuery" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sourceCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">HW_BOOK</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sourceCode</stringProp>
              </elementProp>
              <elementProp name="sourceKey" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sourceKey</stringProp>
              </elementProp>
              <elementProp name="timestamp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1505118957491</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">timestamp</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_sys}/selectDefaultQuery</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/teacher/v1/sec/getSubjectsBySessionId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;sessionId&quot;:[123435]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_teacher}/getSubjectsBySessionId</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/subsystem/homework/v1/sec/getHomeWorkList" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="orderBy" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">EndDate DESC,CreatedOn DESC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">orderBy</stringProp>
              </elementProp>
              <elementProp name="currentPage" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">16</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">currentPage</stringProp>
              </elementProp>
              <elementProp name="pageSize" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">pageSize</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">ALL</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">status</stringProp>
              </elementProp>
              <elementProp name="history" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">history</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
              <elementProp name="timestamp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1505288290442</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">timestamp</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_subsystem}/getHomeWorkList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/subsystem/homework/v1/sec/getHistoryHomeworkCount" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="timestamp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1505118957647</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">timestamp</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_subsystem}/getHistoryHomeworkCount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业中心-待订正" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/app-student/v1/sec/getSpecificAssessment" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">11121</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="isReview" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isReview</stringProp>
              </elementProp>
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">572081</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_appstudent}/getSpecificAssessment</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/app-student/v1/sec/getHomeworkScoreInfo" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="homeworkAssessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">11121</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">homeworkAssessmentId</stringProp>
              </elementProp>
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
              <elementProp name="isReview" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isReview</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">572081</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_appstudent}/getHomeworkScoreInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取questionId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">questionId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;QuestionId&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/app-student/v1/sec/getHomeworkVideoList" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
              <elementProp name="isReview" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isReview</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">123435</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="homeworkAssessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">14701</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">homeworkAssessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">829695</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_appstudent}/getHomeworkVideoList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业中心-成绩报告-去订正" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/type" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">572081</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/type</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业中心-成绩报告-去订正-开始" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/launch" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">572081</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="homeworkAssessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">11121</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">homeworkAssessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/launch</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}
log.info(&quot;resoponse====&quot; + response);
//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, ${userId})));


function prepareSubmitData(data, userId){
         var submitData = {
                    AssessmentType: data[&quot;AssessmentType&quot;],
                    AssessmentId: data[&quot;AssessmentId&quot;],
				SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
                    UserId: userId,
                    LanguageId: data[&quot;LanguageId&quot;],
					IsPreview: data[&quot;IsPreview&quot;],
                    CategoryIndex: data[&quot;CategoryIndex&quot;],
                    GroupIndex: data[&quot;GroupIndex&quot;],
                    QuestionIndex: data[&quot;QuestionIndex&quot;],
                    ActiveIndex: data[&quot;ActiveIndex&quot;],
					IsAssessmentCompleted: true,
                    QuestionCategorys: []
                };
       for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业中心-成绩报告-去订正-开始-查看答案" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/save" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${submitData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/save</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${__V(${type} ${token})}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/save" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;AssessmentType&quot;: 2,&#xd;
    &quot;AssessmentId&quot;: 14702,&#xd;
    &quot;SessionUserTrackingId&quot;: 829730,&#xd;
    &quot;UserId&quot;: ${userId},&#xd;
    &quot;LanguageId&quot;: 3,&#xd;
    &quot;IsPreview&quot;: false,&#xd;
    &quot;CategoryIndex&quot;: 0,&#xd;
    &quot;GroupIndex&quot;: 0,&#xd;
    &quot;QuestionIndex&quot;: 0,&#xd;
    &quot;ActiveIndex&quot;: 0,&#xd;
    &quot;IsAssessmentCompleted&quot;: true,&#xd;
    &quot;QuestionCategorys&quot;: [&#xd;
        {&#xd;
            &quot;CategoryId&quot;: 2,&#xd;
            &quot;CategoryTitle&quot;: &quot;词汇语法&quot;,&#xd;
            &quot;QuestionGroups&quot;: [&#xd;
                {&#xd;
                    &quot;GroupType&quot;: 1,&#xd;
                    &quot;UserTimeSpent&quot;: 0,&#xd;
                    &quot;Questions&quot;: [&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 280185,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;UserResponse&quot;: [],&#xd;
                            &quot;InputTypes&quot;: [&#xd;
                                null&#xd;
                            ],&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;traceBlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ],&#xd;
                    &quot;FeedbackViewed&quot;: true&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;SessionId&quot;: 123435,&#xd;
    &quot;isErrorCorrection&quot;: true,&#xd;
    &quot;errorCorrectionType&quot;: &quot;emend&quot;,&#xd;
    &quot;SubjectId&quot;: 1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.zhishinet.com</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/save</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业中心-成绩报告-去订正-开始-查看答案-强化练习" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/save" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;AssessmentType&quot;: 2,&#xd;
    &quot;AssessmentId&quot;: 14702,&#xd;
    &quot;SessionUserTrackingId&quot;: 829730,&#xd;
    &quot;UserId&quot;: ${userId},&#xd;
    &quot;LanguageId&quot;: 3,&#xd;
    &quot;IsPreview&quot;: false,&#xd;
    &quot;CategoryIndex&quot;: 0,&#xd;
    &quot;GroupIndex&quot;: 0,&#xd;
    &quot;QuestionIndex&quot;: 0,&#xd;
    &quot;ActiveIndex&quot;: 0,&#xd;
    &quot;IsAssessmentCompleted&quot;: true,&#xd;
    &quot;QuestionCategorys&quot;: [&#xd;
        {&#xd;
            &quot;CategoryId&quot;: 2,&#xd;
            &quot;CategoryTitle&quot;: &quot;词汇语法&quot;,&#xd;
            &quot;QuestionGroups&quot;: [&#xd;
                {&#xd;
                    &quot;GroupType&quot;: 1,&#xd;
                    &quot;UserTimeSpent&quot;: 0,&#xd;
                    &quot;Questions&quot;: [&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 280185,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;UserResponse&quot;: [],&#xd;
                            &quot;InputTypes&quot;: [&#xd;
                                null&#xd;
                            ],&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;traceBlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ],&#xd;
                    &quot;FeedbackViewed&quot;: true&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;SessionId&quot;: 123435,&#xd;
    &quot;isErrorCorrection&quot;: true,&#xd;
    &quot;errorCorrectionType&quot;: &quot;emend&quot;,&#xd;
    &quot;SubjectId&quot;: 1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.zhishinet.com</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/save</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/launch/intensifyEmend" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">572081</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="homeworkAssessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">11121</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">homeworkAssessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/launch/intensifyEmend</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}
log.info(&quot;resoponse====&quot; + response);
//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData_ie&quot;,JSON.stringify(prepareSubmitData(response, ${userId})));


function prepareSubmitData(data, userId){
         var submitData = {
                    AssessmentType: data[&quot;AssessmentType&quot;],
                    AssessmentId: data[&quot;AssessmentId&quot;],
					SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
                    LanguageId: data[&quot;LanguageId&quot;],
					IsPreview: data[&quot;IsPreview&quot;],
                    CategoryIndex: data[&quot;CategoryIndex&quot;],
                    GroupIndex: data[&quot;GroupIndex&quot;],
                    QuestionIndex: data[&quot;QuestionIndex&quot;],
                    ActiveIndex: data[&quot;ActiveIndex&quot;],
					SessionId:data[&quot;SessionId&quot;],
					SubjectId:data[&quot;SubjectId&quot;],
					IsAssessmentCompleted: true,
					errorCorrectionType:&quot;intensifyEmend&quot;,
					isErrorCorrection:true,
                    QuestionCategorys: []
                };
       for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业中心-成绩报告-去订正-开始-查看答案-强化练习-提交" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/save/intensifyEmend" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${submitData_ie}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/save/intensifyEmend</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/report" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">572081</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="homeworkAssessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">11121</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">homeworkAssessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/report</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/emend/v1/sec/homework/report/intensifyEmend" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">572081</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="homeworkAssessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">11121</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">homeworkAssessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${basepath_emend}/homework/report/intensifyEmend</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
