<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(host,test.zhishinet.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(prot,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(username,sh000124)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="passwd" elementType="Argument">
            <stringProp name="Argument.name">passwd</stringProp>
            <stringProp name="Argument.value">${__P(password,welcome123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">${__V(${type} ${token})}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="错题本" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1501567698000</longProp>
        <longProp name="ThreadGroup.end_time">1501567698000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="getToken" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取某一学科错题本" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="-771547309">获取某一学科错题本</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果获取到subjectId，则进入获取某一学科错题知识点" enabled="true">
          <stringProp name="IfController.condition">&quot;subjectId&quot; != &quot;&quot;||&quot;subjectId&quot; != undefined</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取用户某一学科错题知识点" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-677276336">获取用户某一学科错题知识点</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="根据条件查询错题列表" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-1703029897">根据条件查询错题列表</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取错题首页错题数量" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="1718971067">获取错题首页错题数量</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取阅读专练错题数量" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-1460140445">获取阅读专练错题数量</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取收藏专练错题数量" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-192595738">获取收藏专练错题数量</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="错题练习成绩查询" enabled="false">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="508264978">错题练习成绩查询</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取错题微视频" enabled="false">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="741578011">获取错题微视频</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="练习册-数学-答题-成绩-错题本列表-本次错题详情" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1498702616000</longProp>
        <longProp name="ThreadGroup.end_time">1498702616000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="认证" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getuser-获取用户信息" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/users/student</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取userId" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取默认课本Id
if(response.ubuserId != &quot;&quot;){
	var userId = response.ubuserId;
	log.info(&quot;用户Id为：&quot; + userId)
	vars.put(&quot;userId&quot;, userId);
}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.ubuserId != &quot;&quot;){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getUserClasses-获取sessionId" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/getUserClasses?timestamp=1501597066397&amp;subjectId=2</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取sessionId" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取课程Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var sessionId = response[index].sessionId;
//	vars.put(&quot;courseSessionId&quot;,sessionId);
	vars.put(&quot;sessionId&quot;,sessionId);
}
	</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
          <stringProp name="IfController.condition">&quot;sessionId&quot; != &quot;&quot; || &quot;sessionId&quot; != undefined</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getCourseCurriculumList-获取所有课本以及课本下练习册列表" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/course/v1/sec/getCourseCurriculumList?sessionId=${sessionId}&amp;subjectId=2&amp;orderBy=HomeworkTextbookId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取练习册Id" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}
//获取练习册Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var curriculumId = response[index].curriculumId;
//	log.info(curriculumId+&quot;：response的个数&quot;+index);
	vars.put(&quot;curriculumId&quot;,curriculumId);
}
	</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="false">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取curriculumId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">curriculumId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;curriculumId&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
            <stringProp name="IfController.condition">${curriculumId} != &quot;&quot; || ${curriculumId} != undefined</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getCourses-获取练习册的课程列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/course/v1/sec/getCourseList?sessionId=${sessionId}&amp;curriculumId=${curriculumId}&amp;orderBy=DisplayOrder</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取课程Id" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取课程Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var courseId = response[index].courseId;
	
	vars.put(&quot;courseId&quot;,courseId);
}
	</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="false">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
              </BSFAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取courseId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">courseId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;courseId&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${courseId} != &quot;&quot; || ${courseId} != undefined</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getCourseSectionAndModuleList-获取单个课件的详细信息" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/course/v1/sec/getCourseSectionAndModuleList?&amp;courseId=${courseId}&amp;sessionId=${sessionId}&amp;pageSize=0</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.json.*;

String jsonString = prev.getResponseDataAsString();
JSONObject dataObject = JSONObject.(jsonString);
String modules_str = data_obj.get(&quot;rows&quot;).get(&quot;modules&quot;).toString();
JSONArray modules_array = new JSONArray(modules_str);
JSONObject module_obj = new JSONObject(modules_array.get(0).toString());
String name = module_obj.get(&quot;assessmentId&quot;).toString();
    
#JSONObject rows = JSONObject.(jsonString);
#JSONArray modules = rows.get(&quot;modules&quot;).asString();
#log.info(&quot;modules&quot;+modules);
#String assessmentId = modules.get(0).asObject().get(&quot;assessmentId&quot;).asString();
vars.put(&quot;assessmentId&quot;,assessmentId);
log.info(&quot;assessmentId&quot;+assessmentId);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Launch PlayList的参数" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}
log.info(&quot;jsonString： &quot; + jsonString);
log.info(&quot;response.rows.length： &quot; + response.rows.length);
	var index1 = Math.floor(Math.random()*(response.rows.length));
	var index2 = Math.floor(Math.random()*(response.rows[index1].modules.length));
log.info(&quot;response.rows.modules.moduleId： &quot; + response.rows[index1].modules[index2].moduleId);
//获取Launch PlayList的参数
if(response.rows.length &gt; 0){
	var courseSessionId = response.rows[index1].modules[index2].courseSessionId;
	var assessmentId = response.rows[index1].modules[index2].assessmentId;
	var sectionId = response.rows[index1].modules[index2].sectionId;
	var allowedAttempts = response.rows[index1].modules[index2].allowedAttempts;
	var sessionUserTrackingId = response.rows[index1].modules[index2].sessionUserTrackingId;
	//templateType = 1老模板；templateType = 2、3新模板
	var templateType = response.rows[index1].modules[index2].templateType;
	//允许剩余提交次数
	var allowedAttempts = response.rows[index1].modules[index2].allowedAttempts;
	//已完成次数
	var completeAttempts = response.rows[index1].modules[index2].completeAttempts;
	var moduleId = response.rows[index1].modules[index2].moduleId;
	var nowAttempts = 0;

	if(allowedAttempts != 0){
		nowAttempts = completeAttempts + 1;
		log.info(&quot;当前尝试次数为：&quot;+nowAttempts);
			vars.put(&quot;courseSessionId&quot;,courseSessionId);
		vars.put(&quot;moduleId&quot;,moduleId);
		vars.put(&quot;assessmentId&quot;,assessmentId);
		vars.put(&quot;sectionId&quot;,sectionId);
		vars.put(&quot;allowedAttempts&quot;,allowedAttempts);
		vars.put(&quot;sessionUserTrackingId&quot;,sessionUserTrackingId);
		vars.put(&quot;nowAttempts&quot;,nowAttempts);
		vars.put(&quot;templateType&quot;,templateType);
	}else{
		vars.put(&quot;nowAttempts&quot;,&quot;finishedAttempts&quot;);
	}
}</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(Object.keys(response).length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
                </BSFAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lanch作业" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="courseId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${courseId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">courseId</stringProp>
                    </elementProp>
                    <elementProp name="courseSessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${courseSessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">courseSessionId</stringProp>
                    </elementProp>
                    <elementProp name="moduleId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${moduleId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">moduleId</stringProp>
                    </elementProp>
                    <elementProp name="isPreview" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isPreview</stringProp>
                    </elementProp>
                    <elementProp name="assessmentId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${assessmentId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">assessmentId</stringProp>
                    </elementProp>
                    <elementProp name="curriculumId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${curriculumId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">curriculumId</stringProp>
                    </elementProp>
                    <elementProp name="courseSectionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sectionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">courseSectionId</stringProp>
                    </elementProp>
                    <elementProp name="attemptNo" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${nowAttempts}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">attemptNo</stringProp>
                    </elementProp>
                    <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionUserTrackingId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
                    </elementProp>
                    <elementProp name="randomNum" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0.7952193759318043</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">randomNum</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/launchTheAssessmentPlaylist</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, ${userId})));

log.info(&quot;submitData&quot; + submitData);
function prepareSubmitData(data, userId){
        var $scope;
        var submitData = {
            //current_index: 0,//当前carousel的index
                AssessmentType: data[&quot;AssessmentType&quot;],
          AssessmentId: data[&quot;AssessmentId&quot;],
          SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
          UserId: userId,
          LanguageId: data[&quot;LanguageId&quot;],
          IsPreview: data[&quot;IsPreview&quot;],
          CategoryIndex: data[&quot;CategoryIndex&quot;],
          GroupIndex: data[&quot;GroupIndex&quot;],
          QuestionIndex: data[&quot;QuestionIndex&quot;],
          ActiveIndex: data[&quot;ActiveIndex&quot;],
          //设置测试为全部提交
          IsAssessmentCompleted: true,
          QuestionCategorys: [],
          CourseId: ${courseId},
          CourseSessionId: ${courseSessionId},
          ModuleId: ${moduleId},
          AttemptNo: ${nowAttempts},
          SessionId: data[&quot;SessionId&quot;]
        };
        
        log.info(submitData);

	for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;],
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;],
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
                </BSFAssertion>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取所有题目QuestionId" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

var QuestionIdList=[];
vars.put(&quot;QuestionIdList&quot;,JSON.stringify(getQuestionId(response)));

log.info(&quot;QuestionIdList&quot; + QuestionIdList);
function getQuestionId(data){
	for (var i = 0; i &lt; data.QuestionCategorys[0].QuestionGroups.length; i++) {
            QuestionIdList.push(data.QuestionCategorys[0].QuestionGroups[i].Question.QuestionId);
            log.info(&quot;QuestionId:&quot; + data.QuestionCategorys[0].QuestionGroups[i].Question.QuestionId);
            };
           
        return QuestionIdList;
    }</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取数学学科错题列表&lt;验证错题列表是否展示数学错题&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="subjectId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">subjectId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorBookList</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取所有错题QuestionId" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

var ErrorQuestionIdList=[];
vars.put(&quot;ErrorQuestionIdList&quot;,JSON.stringify(getErrorQuestionId(response)));

log.info(&quot;ErrorQuestionIdList&quot; + ErrorQuestionIdList);
function getErrorQuestionId(data){
	
	for (var i = 0; i &lt; data.rows.length; i++) {
            ErrorQuestionIdList.push(data.rows[i].QuestionGroups.Question.QuestionId);
            log.info(&quot;ErrorQuestionId:&quot; + data.rows[i].QuestionGroups.Question.QuestionId);
            };
           
        return ErrorQuestionIdList;
    }</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1260074663">${QuestionIdList}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">children</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存答题记录" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${submitData}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/saveTheAssessmentPlaylist</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取练习成绩" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="sessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionId</stringProp>
                    </elementProp>
                    <elementProp name="courseId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${courseId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">courseId</stringProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                    </elementProp>
                    <elementProp name="isReview" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isReview</stringProp>
                    </elementProp>
                    <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionUserTrackingId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
                    </elementProp>
                    <elementProp name="moduleId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${moduleId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">moduleId</stringProp>
                    </elementProp>
                    <elementProp name="attemptNo" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${nowAttempts}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">attemptNo</stringProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                    </elementProp>
                    <elementProp name="assessmentId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${assessmentId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">assessmentId</stringProp>
                    </elementProp>
                    <elementProp name="isPreview" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isPreview</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/getPlaylistScoreInfo</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
                <stringProp name="IfController.condition">&quot;assessmentOwnerIdList&quot; !=&quot;&quot; </stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取本次错题详情" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subjectId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subjectId</stringProp>
                      </elementProp>
                      <elementProp name="orderBy" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">answerDate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">orderBy</stringProp>
                      </elementProp>
                      <elementProp name="isCorrect" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">isCorrect</stringProp>
                      </elementProp>
                      <elementProp name="assessmentOwnerIdList" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">assessmentOwnerIdList</stringProp>
                      </elementProp>
                      <elementProp name="assessmentQuestionTaxonomyTypeList" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">assessmentQuestionTaxonomyTypeList</stringProp>
                      </elementProp>
                      <elementProp name="unitIdList" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">unitIdList</stringProp>
                      </elementProp>
                      <elementProp name="isFavoured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">isFavoured</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                      <elementProp name="pageSize" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">20</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">pageSize</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorBookList</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="练习册-英语-答题-成绩-错题本列表-本次错题详情" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1498702616000</longProp>
        <longProp name="ThreadGroup.end_time">1498702616000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="认证" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getuser-获取用户信息" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/users/student</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取userId" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取默认课本Id
if(response.ubuserId != &quot;&quot;){
	var userId = response.ubuserId;
	log.info(&quot;用户Id为：&quot; + userId)
	vars.put(&quot;userId&quot;, userId);
}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.ubuserId != &quot;&quot;){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getUserClasses-获取sessionId" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/getUserClasses?timestamp=1501597066397&amp;subjectId=1</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取sessionId" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取课程Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var sessionId = response[index].sessionId;
//	vars.put(&quot;courseSessionId&quot;,sessionId);
	vars.put(&quot;sessionId&quot;,sessionId);
}
	</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果获取到sessionId，则获取所有课本以及课本下练习册列表" enabled="true">
          <stringProp name="IfController.condition">&quot;sessionId&quot; != &quot;&quot; || &quot;sessionId&quot; != undefined</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getCourseCurriculumList-获取所有课本以及课本下练习册列表" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/course/v1/sec/getCourseCurriculumList?sessionId=${sessionId}&amp;subjectId=1&amp;orderBy=HomeworkTextbookId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取练习册Id" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}
//获取练习册Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var curriculumId = response[index].curriculumId;
//	log.info(curriculumId+&quot;：response的个数&quot;+index);
	vars.put(&quot;curriculumId&quot;,curriculumId);
}
	</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="false">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取curriculumId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">curriculumId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;curriculumId&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
            <stringProp name="IfController.condition">${curriculumId} != &quot;&quot; || ${curriculumId} != undefined</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getCourses-获取练习册的课程列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/course/v1/sec/getCourseList?sessionId=${sessionId}&amp;curriculumId=${curriculumId}&amp;orderBy=DisplayOrder</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取课程Id" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取课程Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var courseId = response[index].courseId;
	
	vars.put(&quot;courseId&quot;,courseId);
}
	</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="false">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
              </BSFAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取courseId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">courseId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;courseId&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${courseId} != &quot;&quot; || ${courseId} != undefined</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getCourseSectionAndModuleList-获取单个课件的详细信息" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/course/v1/sec/getCourseSectionAndModuleList?&amp;courseId=${courseId}&amp;sessionId=${sessionId}&amp;pageSize=0</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.json.*;

String jsonString = prev.getResponseDataAsString();
JSONObject dataObject = JSONObject.(jsonString);
String modules_str = data_obj.get(&quot;rows&quot;).get(&quot;modules&quot;).toString();
JSONArray modules_array = new JSONArray(modules_str);
JSONObject module_obj = new JSONObject(modules_array.get(0).toString());
String name = module_obj.get(&quot;assessmentId&quot;).toString();
    
#JSONObject rows = JSONObject.(jsonString);
#JSONArray modules = rows.get(&quot;modules&quot;).asString();
#log.info(&quot;modules&quot;+modules);
#String assessmentId = modules.get(0).asObject().get(&quot;assessmentId&quot;).asString();
vars.put(&quot;assessmentId&quot;,assessmentId);
log.info(&quot;assessmentId&quot;+assessmentId);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Launch PlayList的参数" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}
log.info(&quot;jsonString： &quot; + jsonString);
log.info(&quot;response.rows.length： &quot; + response.rows.length);
	var index1 = Math.floor(Math.random()*(response.rows.length));
	var index2 = Math.floor(Math.random()*(response.rows[index1].modules.length));
log.info(&quot;response.rows.modules.moduleId： &quot; + response.rows[index1].modules[index2].moduleId);
//获取Launch PlayList的参数
if(response.rows.length &gt; 0){
	var courseSessionId = response.rows[index1].modules[index2].courseSessionId;
	var assessmentId = response.rows[index1].modules[index2].assessmentId;
	var sectionId = response.rows[index1].modules[index2].sectionId;
	var allowedAttempts = response.rows[index1].modules[index2].allowedAttempts;
	var sessionUserTrackingId = response.rows[index1].modules[index2].sessionUserTrackingId;
	//templateType = 1老模板；templateType = 2、3新模板
	var templateType = response.rows[index1].modules[index2].templateType;
	//允许剩余提交次数
	var allowedAttempts = response.rows[index1].modules[index2].allowedAttempts;
	//已完成次数
	var completeAttempts = response.rows[index1].modules[index2].completeAttempts;
	var moduleId = response.rows[index1].modules[index2].moduleId;
	var nowAttempts = 0;

	if(allowedAttempts != 0){
		nowAttempts = completeAttempts + 1;
		log.info(&quot;当前尝试次数为：&quot;+nowAttempts);
			vars.put(&quot;courseSessionId&quot;,courseSessionId);
		vars.put(&quot;moduleId&quot;,moduleId);
		vars.put(&quot;assessmentId&quot;,assessmentId);
		vars.put(&quot;sectionId&quot;,sectionId);
		vars.put(&quot;allowedAttempts&quot;,allowedAttempts);
		vars.put(&quot;sessionUserTrackingId&quot;,sessionUserTrackingId);
		vars.put(&quot;nowAttempts&quot;,nowAttempts);
		vars.put(&quot;templateType&quot;,templateType);
	}else{
		vars.put(&quot;nowAttempts&quot;,&quot;finishedAttempts&quot;);
	}
}</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(Object.keys(response).length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
                </BSFAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lanch作业" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="courseId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${courseId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">courseId</stringProp>
                    </elementProp>
                    <elementProp name="courseSessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${courseSessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">courseSessionId</stringProp>
                    </elementProp>
                    <elementProp name="moduleId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${moduleId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">moduleId</stringProp>
                    </elementProp>
                    <elementProp name="isPreview" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isPreview</stringProp>
                    </elementProp>
                    <elementProp name="assessmentId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${assessmentId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">assessmentId</stringProp>
                    </elementProp>
                    <elementProp name="curriculumId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${curriculumId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">curriculumId</stringProp>
                    </elementProp>
                    <elementProp name="courseSectionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sectionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">courseSectionId</stringProp>
                    </elementProp>
                    <elementProp name="attemptNo" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${nowAttempts}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">attemptNo</stringProp>
                    </elementProp>
                    <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionUserTrackingId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
                    </elementProp>
                    <elementProp name="randomNum" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0.7952193759318043</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">randomNum</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/launchTheAssessmentPlaylist</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, ${userId})));


function prepareSubmitData(data, userId){
        var $scope;
        var submitData = {
            //current_index: 0,//当前carousel的index
                AssessmentType: data[&quot;AssessmentType&quot;],
          AssessmentId: data[&quot;AssessmentId&quot;],
          SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
          UserId: userId,
          LanguageId: data[&quot;LanguageId&quot;],
          IsPreview: data[&quot;IsPreview&quot;],
          CategoryIndex: data[&quot;CategoryIndex&quot;],
          GroupIndex: data[&quot;GroupIndex&quot;],
          QuestionIndex: data[&quot;QuestionIndex&quot;],
          ActiveIndex: data[&quot;ActiveIndex&quot;],
          //设置测试为全部提交
          IsAssessmentCompleted: true,
          QuestionCategorys: [],
          CourseId: ${courseId},
          CourseSessionId: ${courseSessionId},
          ModuleId: ${moduleId},
          AttemptNo: ${nowAttempts},
          SessionId: data[&quot;SessionId&quot;]
        };
        
        log.info(submitData);

	for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;],
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;],
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
                </BSFAssertion>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取所有题目QuestionId" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

var QuestionIdList=[];
log.info(&quot;lanch jsonString: &quot; + jsonString);
log.info(&quot;lanch response: &quot; + response);
log.info(&quot;QuestionCategorys[0].QuestionGroups.length&quot; + response.QuestionCategorys[0].QuestionGroups.
length);
vars.put(&quot;QuestionIdList&quot;,JSON.stringify(getQuestionId(response)));

log.info(&quot;QuestionIdList&quot; + QuestionIdList);

function getQuestionId(data){
	for (var i = 0; (i &lt; data.QuestionCategorys[0].QuestionGroups.length)||(i &lt; data.QuestionCategorys[0].QuestionGroups[0].OralParagraph.OralParagraphQuestions.length); i++) {
		switch (data.QuestionCategorys[0].QuestionGroups[i].GroupType) {
              case 1: //词汇
                    QuestionIdList.push(data.QuestionCategorys[0].QuestionGroups[i].Question.QuestionId);
            		log.info(&quot;QuestionId:&quot; + data.QuestionCategorys[0].QuestionGroups[i].Question.QuestionId);
            		break;
              case 2: //阅读
              case 3: //视频
                    QuestionIdList.push(data.QuestionCategorys[0].QuestionGroups[i].Video.VideoQuestions.QuestionId);
            		log.info(&quot;QuestionId:&quot; + data.QuestionCategorys[0].QuestionGroups[i].Video.VideoQuestions.QuestionId);
            		break;
              case 4: //单词跟读
              case 5: //猜词游戏
            		QuestionIdList.push(data.QuestionCategorys[0].QuestionGroups[i].OralQuestion.QuestionId);
            		log.info(&quot;QuestionId:&quot; + data.QuestionCategorys[0].QuestionGroups[i].OralQuestion.QuestionId);
            		break;
			case 6: //句子跟读
            		QuestionIdList.push(data.QuestionCategorys[0].QuestionGroups[0].OralParagraph.OralParagraphQuestions[i].QuestionId);
            		log.info(&quot;QuestionId:&quot; + data.QuestionCategorys[0].QuestionGroups[0].OralParagraph.OralParagraphQuestions[i].QuestionId);
            		break;
			}
      };
           
        return QuestionIdList;
    }</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取英语学科错题列表&lt;验证错题列表是否展示英语错题&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="subjectId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">subjectId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorBookList</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取所有错题QuestionId" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

var ErrorQuestionIdList=[];
vars.put(&quot;ErrorQuestionIdList&quot;,JSON.stringify(getErrorQuestionId(response)));

log.info(&quot;ErrorQuestionIdList&quot; + ErrorQuestionIdList);
function getErrorQuestionId(data){
	
	for (var i = 0; i &lt; data.rows.length; i++) {
            ErrorQuestionIdList.push(data.rows[i].QuestionGroups.Question.QuestionId);
            log.info(&quot;ErrorQuestionId:&quot; + data.rows[i].QuestionGroups.Question.QuestionId);
            };
           
        return ErrorQuestionIdList;
    }</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1260074663">${QuestionIdList}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存答题记录" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${submitData}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/saveTheAssessmentPlaylist</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取练习成绩" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="sessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionId</stringProp>
                    </elementProp>
                    <elementProp name="courseId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${courseId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">courseId</stringProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                    </elementProp>
                    <elementProp name="isReview" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isReview</stringProp>
                    </elementProp>
                    <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionUserTrackingId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
                    </elementProp>
                    <elementProp name="moduleId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${moduleId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">moduleId</stringProp>
                    </elementProp>
                    <elementProp name="attemptNo" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${nowAttempts}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">attemptNo</stringProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                    </elementProp>
                    <elementProp name="assessmentId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${assessmentId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">assessmentId</stringProp>
                    </elementProp>
                    <elementProp name="isPreview" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isPreview</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/getPlaylistScoreInfo</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
                <stringProp name="IfController.condition">&quot;assessmentOwnerIdList&quot; !=&quot;&quot; </stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取本次错题详情" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="subjectId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">subjectId</stringProp>
                      </elementProp>
                      <elementProp name="orderBy" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">answerDate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">orderBy</stringProp>
                      </elementProp>
                      <elementProp name="isCorrect" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">isCorrect</stringProp>
                      </elementProp>
                      <elementProp name="assessmentOwnerIdList" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">assessmentOwnerIdList</stringProp>
                      </elementProp>
                      <elementProp name="assessmentQuestionTaxonomyTypeList" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">assessmentQuestionTaxonomyTypeList</stringProp>
                      </elementProp>
                      <elementProp name="unitIdList" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">unitIdList</stringProp>
                      </elementProp>
                      <elementProp name="isFavoured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">isFavoured</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                      <elementProp name="pageSize" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">20</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">pageSize</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorBookList</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="巩固练习-英语练习-答题-成绩-继续练习" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1498702616000</longProp>
        <longProp name="ThreadGroup.end_time">1498702616000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="认证" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getuser-获取用户信息" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/users/student</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取userId" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取默认课本Id
if(response.ubuserId != &quot;&quot;){
	var userId = response.ubuserId;
	log.info(&quot;用户Id为：&quot; + userId)
	vars.put(&quot;userId&quot;, userId);
}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.ubuserId != &quot;&quot;){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
          <stringProp name="IfController.condition">&quot;userId&quot; != &quot;&quot; || &quot;userId&quot; != undefined</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getErrorTextbook-进入错题本" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getErrorTextbook?subjectId=1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取sessionId" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取课程Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var sessionId = response[index].sessionId;
//	vars.put(&quot;courseSessionId&quot;,sessionId);
	vars.put(&quot;sessionId&quot;,sessionId);
}
	</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
            <stringProp name="IfController.condition">&quot;sessionId&quot; != &quot;&quot; || &quot;sessionId&quot; != undefined</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookUpValue-获取错题" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/sys/v1/sec/getLookUpValue?lookUpType=ReadingQuestionType</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取curriculumId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">curriculumId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;curriculumId&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getPractice-获取练习题目" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;feature&quot;: 1,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;unitIdList&quot;: [],&#xd;
    &quot;assessmentOwnerIdList&quot;: [],&#xd;
    &quot;assessmentQuestionTaxonomyTypeList&quot;: [],&#xd;
    &quot;isFavoured&quot;: false,&#xd;
    &quot;isCorrect&quot;: &quot;&quot;,&#xd;
    &quot;orderBy&quot;: &quot;answerDate&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getPractice</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}
log.info(&quot;resoponse====&quot; + response);
//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, ${userId})));


function prepareSubmitData(data, userId){
         var submitData = {
                    PracticeId: data[&quot;PracticeId&quot;],
                    SubjectId: data[&quot;SubjectId&quot;],
                    UserId: userId,
                    IsAssessmentCompleted: false,
                    ErrorBook: true,
                    CategoryIndex: data[&quot;CategoryIndex&quot;],
                    GroupIndex: data[&quot;GroupIndex&quot;],
                    QuestionIndex: data[&quot;QuestionIndex&quot;],
                    ActiveIndex: data[&quot;ActiveIndex&quot;],
                    QuestionCategorys: []
                };
       for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
              </BSFAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取PracticeId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">practiceId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;PracticeId&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveEmendbook-答题提交" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${submitData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/saveEmendbook</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取错题本成绩" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="practiceId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${practiceId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">practiceId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getEmendbookScoreInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getPractice-继续练习" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;feature&quot;: 1,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;unitIdList&quot;: [],&#xd;
    &quot;assessmentOwnerIdList&quot;: [],&#xd;
    &quot;assessmentQuestionTaxonomyTypeList&quot;: [],&#xd;
    &quot;isFavoured&quot;: false,&#xd;
    &quot;isCorrect&quot;: &quot;&quot;,&#xd;
    &quot;orderBy&quot;: &quot;answerDate&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getPractice</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取课程Id" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取课程Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var courseId = response[index].courseId;
	
	vars.put(&quot;courseId&quot;,courseId);
}
	</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="巩固练习-数学练习-答题-成绩-继续练习" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1498702616000</longProp>
        <longProp name="ThreadGroup.end_time">1498702616000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="认证" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getuser-获取用户信息" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v1/sec/users/student</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取userId" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取默认课本Id
if(response.ubuserId != &quot;&quot;){
	var userId = response.ubuserId;
	log.info(&quot;用户Id为：&quot; + userId)
	vars.put(&quot;userId&quot;, userId);
}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.ubuserId != &quot;&quot;){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
          <stringProp name="IfController.condition">&quot;userId&quot; != &quot;&quot;||&quot;userId&quot; != undefined</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getErrorTextbook-进入错题本" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getErrorTextbook?subjectId=1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取sessionId" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取课程Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var sessionId = response[index].sessionId;
//	vars.put(&quot;courseSessionId&quot;,sessionId);
	vars.put(&quot;sessionId&quot;,sessionId);
}
	</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
            <stringProp name="IfController.condition">&quot;sessionId&quot; != &quot;&quot; &amp;&amp; &quot;sessionId&quot; != undefined</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookUpValue-获取错题" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/sys/v1/sec/getLookUpValue?lookUpType=ReadingQuestionType</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取curriculumId" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">curriculumId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;curriculumId&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getPractice-获取练习题目" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;feature&quot;: 1,&#xd;
    &quot;subjectId&quot;: 2,&#xd;
    &quot;unitIdList&quot;: [],&#xd;
    &quot;assessmentOwnerIdList&quot;: [],&#xd;
    &quot;assessmentQuestionTaxonomyTypeList&quot;: [],&#xd;
    &quot;isFavoured&quot;: false,&#xd;
    &quot;isCorrect&quot;: &quot;&quot;,&#xd;
    &quot;orderBy&quot;: &quot;answerDate&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getPractice</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}
log.info(&quot;resoponse====&quot; + response);
//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, ${userId})));


function prepareSubmitData(data, userId){
         var submitData = {
                    PracticeId: data[&quot;PracticeId&quot;],
                    SubjectId: data[&quot;SubjectId&quot;],
                    UserId: userId,
                    IsAssessmentCompleted: false,
                    ErrorBook: true,
                    CategoryIndex: data[&quot;CategoryIndex&quot;],
                    GroupIndex: data[&quot;GroupIndex&quot;],
                    QuestionIndex: data[&quot;QuestionIndex&quot;],
                    ActiveIndex: data[&quot;ActiveIndex&quot;],
                    QuestionCategorys: []
                };
       for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the curriculumId is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
              </BSFAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取PracticeId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">practiceId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;PracticeId&quot;:(.*?),</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveEmendbook-答题提交" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${submitData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/saveEmendbook</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取错题本成绩" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="practiceId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${practiceId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">practiceId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getEmendbookScoreInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getPractice-继续练习" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;feature&quot;: 1,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;unitIdList&quot;: [],&#xd;
    &quot;assessmentOwnerIdList&quot;: [],&#xd;
    &quot;assessmentQuestionTaxonomyTypeList&quot;: [],&#xd;
    &quot;isFavoured&quot;: false,&#xd;
    &quot;isCorrect&quot;: &quot;&quot;,&#xd;
    &quot;orderBy&quot;: &quot;answerDate&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getPractice</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取课程Id" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

//获取课程Id
if(response.length &gt; 0){
	var index = Math.floor(Math.random()*(response.length));
	var courseId = response[index].courseId;
	
	vars.put(&quot;courseId&quot;,courseId);
}
	</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="getToken" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;: &quot;${username}&quot;,&#xd;
	&quot;password&quot;: &quot;${passwd}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/zauth/v1/token/access</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="type" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">type</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token_type&quot;:&quot;(.*?)&quot;}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.*?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取某一学科错题本" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取英语学科错题本" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorTextbook</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:&quot;(.*?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取数学学科错题本" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorTextbook</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取用户某一学科错题知识点" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取英语学科错题知识点" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorUserKnowledge</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取数学学科的错误知识点" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorUserKnowledge</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="根据条件查询错题列表" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="错题列表查询" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
              <elementProp name="orderBy" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">answerDate</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">orderBy</stringProp>
              </elementProp>
              <elementProp name="isCorrect" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isCorrect</stringProp>
              </elementProp>
              <elementProp name="assessmentOwnerIdList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">3173,3177,3519</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentOwnerIdList</stringProp>
              </elementProp>
              <elementProp name="assessmentQuestionTaxonomyTypeList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2,3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentQuestionTaxonomyTypeList</stringProp>
              </elementProp>
              <elementProp name="homeworkTextbookId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">11</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">homeworkTextbookId</stringProp>
              </elementProp>
              <elementProp name="unitIdList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">84,88</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">unitIdList</stringProp>
              </elementProp>
              <elementProp name="isFavoured" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isFavoured</stringProp>
              </elementProp>
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="pageSize" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">20</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">pageSize</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/emendbook/v1/sec/getErrorBookList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取错题首页错题数量" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取首页错题数量-英语" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getErrorHomepageCount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取首页错题数量-数学" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getErrorHomepageCount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取收藏专练错题数量" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取收藏专练错题数量-英语" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getFavouredCount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取收藏专练错题数量-数学" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getFavouredCount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取阅读专练错题数量" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取阅读专练错题数量-英语" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getArticleCount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取阅读专练错题数量-数学" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getArticleCount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="错题练习成绩查询" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="错题练习成绩查询" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="practiceId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">practiceId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getEmendbookScoreInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取错题微视频" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取错题微视频" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="questionIdList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">questionIdList</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/emendbook/v1/sec/getMicroVideo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
