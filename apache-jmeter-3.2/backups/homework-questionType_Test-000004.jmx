<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(host,dev.zhishinet.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(prot,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(username,sh000124)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="passwd" elementType="Argument">
            <stringProp name="Argument.name">passwd</stringProp>
            <stringProp name="Argument.value">${__P(password,welcome3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">${__V(${type} ${token})}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="num" elementType="Argument">
            <stringProp name="Argument.name">num</stringProp>
            <stringProp name="Argument.value">${__Random(1,99999999,num)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="getToken" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;: &quot;${username}&quot;,&#xd;
	&quot;password&quot;: &quot;${passwd}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/zauth/v1/token/access</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="type" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">type</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token_type&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="单词跟读题型验证" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519903893000</longProp>
        <longProp name="ThreadGroup.end_time">1519903893000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="getToken" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="setHomeworkSuitSeries-创建套题册" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesName&quot;: &quot;单词跟读${num}&quot;,&#xd;
	&quot;homeworkTextbookId&quot;: 10,&#xd;
	&quot;description&quot;: &quot;测试&quot;,&#xd;
	&quot;tagLines&quot;: [{&#xd;
		&quot;tagHeaderId&quot;: 10002,&#xd;
		&quot;tagLineId&quot;: 10667&#xd;
	}]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/setHomeworkSuitSeries</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shss_suitSeriesId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">shss_suitSeriesId</stringProp>
            <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String shss_suitSeriesId = vars.get(&quot;shss_suitSeriesIdd&quot;);
props.put(&quot;shss_suitSeriesId&quot;, shss_suitSeriesId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addSessions-添加班级" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesId&quot;: ${shss_suitSeriesId},&#xd;
	&quot;addSessionIdList&quot;: [2624],&#xd;
	&quot;removeSessionIdList&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suitSeries/addSessions</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="questionPool-关联题库" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/questionPool?subjectId=1&amp;page=1&amp;pageSize=10&amp;title=单词跟读</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="homeworkSuit-套题保存（关联题库和关联套题册）" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;articles&quot;: [],&#xd;
	&quot;homeworkSuit&quot;: {&#xd;
		&quot;suitId&quot;: null,&#xd;
		&quot;suitName&quot;: &quot;单词跟读${num}&quot;,&#xd;
		&quot;displayOrder&quot;: &quot;&quot;,&#xd;
		&quot;startDate&quot;: null,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;homeworkType&quot;: &quot;SELECTED_PRACTICE_SUIT&quot;,&#xd;
		&quot;suitType&quot;: &quot;ORAL_PRACTICE&quot;,&#xd;
		&quot;subjectId&quot;: 1,&#xd;
		&quot;objectVersionNumber&quot;: 1,&#xd;
		&quot;homeworkTextbookSeriesId&quot;: 2,&#xd;
		&quot;homeworkTextbookId&quot;: 10,&#xd;
		&quot;homeworkSuitUnitList&quot;: [{&#xd;
			&quot;homeworkUnitId&quot;: 189&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 190&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 191&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 192&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 193&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 194&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 195&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 196&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 197&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 576&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 199&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 200&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 681&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 635&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 654&#xd;
		}],&#xd;
		&quot;homeworkSuitRelSeriesList&quot;: [{&#xd;
			&quot;suitSeriesId&quot;: ${shss_suitSeriesId}&#xd;
		}],&#xd;
		&quot;tagLines&quot;: [],&#xd;
		&quot;suitDistrictsList&quot;: [{&#xd;
			&quot;provinceId&quot;: &quot;&quot;,&#xd;
			&quot;cityId&quot;: &quot;&quot;&#xd;
		}]&#xd;
	},&#xd;
	&quot;pools&quot;: [{&#xd;
		&quot;poolId&quot;: ${poolId},&#xd;
		&quot;questionCount&quot;: 15&#xd;
	}],&#xd;
	&quot;oralParagraphs&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/homeworkSuit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取suitId1" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">suitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.suitId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String suitId = vars.get(&quot;suitId&quot;);
props.put(&quot;suitId&quot;, suitId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="combine-套题发布" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitIds&quot;:[${suitId}],&#xd;
	&quot;status&quot;:&quot;RELEASE&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suit/combine</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="publishAssessment--单词跟读布置作业" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;textbookSeriesId&quot;: 1,&#xd;
    &quot;textbookId&quot;: 1,&#xd;
    &quot;assessmentBuilderType&quot;: 2,&#xd;
    &quot;title&quot;: &quot;${num}单词跟读201802261&quot;,&#xd;
    &quot;beginDate&quot;: &quot;2018-05-08&quot;,&#xd;
    &quot;endDate&quot;: &quot;2025-03-08&quot;,&#xd;
    &quot;isOptionRandom&quot;: true,&#xd;
    &quot;isQuestionFeedback&quot;: true,&#xd;
    &quot;showSubTitle&quot;: false,&#xd;
    &quot;isTimerOn&quot;: true,&#xd;
    &quot;isPublish&quot;: true,&#xd;
    &quot;duration&quot;: 13,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;assessmentBuilderUnitList&quot;: [&#xd;
        {&#xd;
            &quot;unitName&quot;: &quot;Unit 1&quot;,&#xd;
            &quot;unitNo&quot;: 1,&#xd;
            &quot;unitId&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderClassificationList&quot;: [&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 1,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 2,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 3,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 6,&#xd;
            &quot;assessmentQuestionCount&quot;: 13&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 7,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderSessionList&quot;: [&#xd;
        {&#xd;
            &quot;sessionId&quot;: 2624,&#xd;
            &quot;globalSessionTitle&quot;: &quot;2015级QAclass&quot;,&#xd;
            &quot;checkFlag&quot;: false,&#xd;
            &quot;sessItemId&quot;: 0,&#xd;
            &quot;isRequire&quot;: true,&#xd;
            &quot;isRequiredEmend&quot;: false,&#xd;
            &quot;isChecked&quot;: true,&#xd;
            &quot;selectAsk&quot;: [&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequire&quot;: true&#xd;
                },&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequiredEmend&quot;: true,&#xd;
                    &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;suitRelAssessmentBuilderList&quot;: [&#xd;
        {&#xd;
            &quot;suitId&quot;: 11060&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/publishAssessment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">assessmentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.assessmentIds[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkInfo--单词跟读" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkScoreNew(获取sessionUserTrackingId)--单词跟读" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkScoreNew</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="launchTheAssessmentHomework--单词跟读" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionUserTrackingId_g1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="randomNum" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0.4781015824927144</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">randomNum</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/launchTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, 5866)));


function prepareSubmitData(data, userId){
        var $scope;
        var submitData = {
            //current_index: 0,//当前carousel的index
                AssessmentType: data[&quot;AssessmentType&quot;],
          AssessmentId: data[&quot;AssessmentId&quot;],
          SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
          UserId: 5866,
          LanguageId: data[&quot;LanguageId&quot;],
          IsPreview: data[&quot;IsPreview&quot;],
          CategoryIndex: data[&quot;CategoryIndex&quot;],
          GroupIndex: data[&quot;GroupIndex&quot;],
          QuestionIndex: data[&quot;QuestionIndex&quot;],
          ActiveIndex: data[&quot;ActiveIndex&quot;],
          //设置测试为全部提交
          IsAssessmentCompleted: true,
          QuestionCategorys: [],
          assessmentId: ${assessmentId},
          SessionId: data[&quot;SessionId&quot;]
        };
        
        log.info(submitData);

	for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;],
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;],
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveTheAssessmentHomework--单词跟读" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${submitData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/saveTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId}    ${sessionUserTrackingId_g1}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deleteHomework--单词跟读" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;assessmentId&quot;: &quot;${assessmentId}&quot;,&#xd;
    &quot;sessionId&quot;: 2624&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/teacher/deleteHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="猜词练习题型验证" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519903893000</longProp>
        <longProp name="ThreadGroup.end_time">1519903893000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="getToken" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="setHomeworkSuitSeries-创建套题册" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesName&quot;: &quot;猜词游戏${num}&quot;,&#xd;
	&quot;homeworkTextbookId&quot;: 10,&#xd;
	&quot;description&quot;: &quot;测试&quot;,&#xd;
	&quot;tagLines&quot;: [{&#xd;
		&quot;tagHeaderId&quot;: 10002,&#xd;
		&quot;tagLineId&quot;: 10667&#xd;
	}]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/setHomeworkSuitSeries</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shss_suitSeriesId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">shss_suitSeriesId</stringProp>
            <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String shss_suitSeriesId = vars.get(&quot;shss_suitSeriesIdd&quot;);
props.put(&quot;shss_suitSeriesId&quot;, shss_suitSeriesId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addSessions-添加班级" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesId&quot;: ${shss_suitSeriesId},&#xd;
	&quot;addSessionIdList&quot;: [2624],&#xd;
	&quot;removeSessionIdList&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suitSeries/addSessions</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="combine-套题发布" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitIds&quot;:[${suitId}],&#xd;
	&quot;status&quot;:&quot;RELEASE&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suit/combine</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="questionPool-关联题库" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/questionPool?subjectId=1&amp;page=1&amp;pageSize=10&amp;title=猜词游戏</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="homeworkSuit-套题保存（关联题库和关联套题册）" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;articles&quot;: [],&#xd;
	&quot;homeworkSuit&quot;: {&#xd;
		&quot;suitId&quot;: null,&#xd;
		&quot;suitName&quot;: &quot;猜词游戏${num}&quot;,&#xd;
		&quot;displayOrder&quot;: &quot;&quot;,&#xd;
		&quot;startDate&quot;: null,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;homeworkType&quot;: &quot;SELECTED_PRACTICE_SUIT&quot;,&#xd;
		&quot;suitType&quot;: &quot;ORAL_PRACTICE&quot;,&#xd;
		&quot;subjectId&quot;: 1,&#xd;
		&quot;objectVersionNumber&quot;: 1,&#xd;
		&quot;homeworkTextbookSeriesId&quot;: 2,&#xd;
		&quot;homeworkTextbookId&quot;: 10,&#xd;
		&quot;homeworkSuitUnitList&quot;: [{&#xd;
			&quot;homeworkUnitId&quot;: 189&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 190&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 191&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 192&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 193&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 194&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 195&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 196&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 197&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 576&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 199&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 200&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 681&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 635&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 654&#xd;
		}],&#xd;
		&quot;homeworkSuitRelSeriesList&quot;: [{&#xd;
			&quot;suitSeriesId&quot;: ${shss_suitSeriesId}&#xd;
		}],&#xd;
		&quot;tagLines&quot;: [],&#xd;
		&quot;suitDistrictsList&quot;: [{&#xd;
			&quot;provinceId&quot;: &quot;&quot;,&#xd;
			&quot;cityId&quot;: &quot;&quot;&#xd;
		}]&#xd;
	},&#xd;
	&quot;pools&quot;: [{&#xd;
		&quot;poolId&quot;: ${poolId},&#xd;
		&quot;questionCount&quot;: 15&#xd;
	}],&#xd;
	&quot;oralParagraphs&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/homeworkSuit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取suitId1" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">suitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.suitId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String suitId = vars.get(&quot;suitId&quot;);
props.put(&quot;suitId&quot;, suitId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="publishAssessment--猜词练习布置作业" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;textbookSeriesId&quot;: 1,&#xd;
    &quot;textbookId&quot;: 1,&#xd;
    &quot;assessmentBuilderType&quot;: 2,&#xd;
    &quot;title&quot;: &quot;${num}猜词练习201802261&quot;,&#xd;
    &quot;beginDate&quot;: &quot;2018-05-08&quot;,&#xd;
    &quot;endDate&quot;: &quot;2025-03-08&quot;,&#xd;
    &quot;isOptionRandom&quot;: true,&#xd;
    &quot;isQuestionFeedback&quot;: true,&#xd;
    &quot;showSubTitle&quot;: false,&#xd;
    &quot;isTimerOn&quot;: true,&#xd;
    &quot;isPublish&quot;: true,&#xd;
    &quot;duration&quot;: 9,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;assessmentBuilderUnitList&quot;: [&#xd;
        {&#xd;
            &quot;unitName&quot;: &quot;Unit 1&quot;,&#xd;
            &quot;unitNo&quot;: 1,&#xd;
            &quot;unitId&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderClassificationList&quot;: [&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 1,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 2,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 3,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 6,&#xd;
            &quot;assessmentQuestionCount&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 7,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderSessionList&quot;: [&#xd;
        {&#xd;
            &quot;sessionId&quot;: 2624,&#xd;
            &quot;globalSessionTitle&quot;: &quot;2015级QAclass&quot;,&#xd;
            &quot;checkFlag&quot;: false,&#xd;
            &quot;sessItemId&quot;: 0,&#xd;
            &quot;isRequire&quot;: true,&#xd;
            &quot;isRequiredEmend&quot;: false,&#xd;
            &quot;isChecked&quot;: true,&#xd;
            &quot;selectAsk&quot;: [&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequire&quot;: true&#xd;
                },&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequiredEmend&quot;: true,&#xd;
                    &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;suitRelAssessmentBuilderList&quot;: [&#xd;
        {&#xd;
            &quot;suitId&quot;: 11061&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/publishAssessment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">assessmentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.assessmentIds[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkInfo--猜词练习" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkScoreNew(获取sessionUserTrackingId)--猜词练习" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkScoreNew</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="launchTheAssessmentHomework--猜词练习" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionUserTrackingId_g1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="randomNum" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0.4781015824927144</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">randomNum</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/launchTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, 5866)));


function prepareSubmitData(data, userId){
        var $scope;
        var submitData = {
            //current_index: 0,//当前carousel的index
                AssessmentType: data[&quot;AssessmentType&quot;],
          AssessmentId: data[&quot;AssessmentId&quot;],
          SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
          UserId: 5866,
          LanguageId: data[&quot;LanguageId&quot;],
          IsPreview: data[&quot;IsPreview&quot;],
          CategoryIndex: data[&quot;CategoryIndex&quot;],
          GroupIndex: data[&quot;GroupIndex&quot;],
          QuestionIndex: data[&quot;QuestionIndex&quot;],
          ActiveIndex: data[&quot;ActiveIndex&quot;],
          //设置测试为全部提交
          IsAssessmentCompleted: true,
          QuestionCategorys: [],
          assessmentId: ${assessmentId},
          SessionId: data[&quot;SessionId&quot;]
        };
        
        log.info(submitData);

	for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;],
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;],
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveTheAssessmentHomework--猜词练习" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${submitData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/saveTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId}    ${sessionUserTrackingId_g1}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deleteHomework--猜词练习" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;assessmentId&quot;: &quot;${assessmentId}&quot;,&#xd;
    &quot;sessionId&quot;: 2624&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/teacher/deleteHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="口语句子题型验证" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519903893000</longProp>
        <longProp name="ThreadGroup.end_time">1519903893000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="getToken" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="setHomeworkSuitSeries-创建套题册" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesName&quot;: &quot;口语句子${num}&quot;,&#xd;
	&quot;homeworkTextbookId&quot;: 10,&#xd;
	&quot;description&quot;: &quot;测试&quot;,&#xd;
	&quot;tagLines&quot;: [{&#xd;
		&quot;tagHeaderId&quot;: 10002,&#xd;
		&quot;tagLineId&quot;: 10667&#xd;
	}]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/setHomeworkSuitSeries</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shss_suitSeriesId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">shss_suitSeriesId</stringProp>
            <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String shss_suitSeriesId = vars.get(&quot;shss_suitSeriesIdd&quot;);
props.put(&quot;shss_suitSeriesId&quot;, shss_suitSeriesId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addSessions-添加班级" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesId&quot;: ${shss_suitSeriesId},&#xd;
	&quot;addSessionIdList&quot;: [2624],&#xd;
	&quot;removeSessionIdList&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suitSeries/addSessions</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="combine-套题发布" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitIds&quot;:[${suitId}],&#xd;
	&quot;status&quot;:&quot;RELEASE&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suit/combine</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="questionPool-关联题库" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/questionPool?subjectId=1&amp;page=1&amp;pageSize=10&amp;title=口语句子</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="homeworkSuit-套题保存（关联题库和关联套题册）" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;articles&quot;: [],&#xd;
	&quot;homeworkSuit&quot;: {&#xd;
		&quot;suitId&quot;: null,&#xd;
		&quot;suitName&quot;: &quot;口语句子${num}&quot;,&#xd;
		&quot;displayOrder&quot;: &quot;&quot;,&#xd;
		&quot;startDate&quot;: null,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;homeworkType&quot;: &quot;SELECTED_PRACTICE_SUIT&quot;,&#xd;
		&quot;suitType&quot;: &quot;ORAL_PRACTICE&quot;,&#xd;
		&quot;subjectId&quot;: 1,&#xd;
		&quot;objectVersionNumber&quot;: 1,&#xd;
		&quot;homeworkTextbookSeriesId&quot;: 2,&#xd;
		&quot;homeworkTextbookId&quot;: 10,&#xd;
		&quot;homeworkSuitUnitList&quot;: [{&#xd;
			&quot;homeworkUnitId&quot;: 189&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 190&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 191&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 192&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 193&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 194&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 195&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 196&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 197&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 576&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 199&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 200&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 681&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 635&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 654&#xd;
		}],&#xd;
		&quot;homeworkSuitRelSeriesList&quot;: [{&#xd;
			&quot;suitSeriesId&quot;: ${shss_suitSeriesId}&#xd;
		}],&#xd;
		&quot;tagLines&quot;: [],&#xd;
		&quot;suitDistrictsList&quot;: [{&#xd;
			&quot;provinceId&quot;: &quot;&quot;,&#xd;
			&quot;cityId&quot;: &quot;&quot;&#xd;
		}]&#xd;
	},&#xd;
	&quot;pools&quot;: [{&#xd;
		&quot;poolId&quot;: ${poolId},&#xd;
		&quot;questionCount&quot;: 15&#xd;
	}],&#xd;
	&quot;oralParagraphs&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/homeworkSuit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取suitId1" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">suitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.suitId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String suitId = vars.get(&quot;suitId&quot;);
props.put(&quot;suitId&quot;, suitId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="publishAssessment布置作业--口语句子" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;textbookSeriesId&quot;: 1,&#xd;
    &quot;textbookId&quot;: 1,&#xd;
    &quot;assessmentBuilderType&quot;: 2,&#xd;
    &quot;title&quot;: &quot;${num}口语句子201802261-1&quot;,&#xd;
    &quot;beginDate&quot;: &quot;2018-05-08&quot;,&#xd;
    &quot;endDate&quot;: &quot;2025-03-08&quot;,&#xd;
    &quot;isOptionRandom&quot;: true,&#xd;
    &quot;isQuestionFeedback&quot;: true,&#xd;
    &quot;showSubTitle&quot;: false,&#xd;
    &quot;isTimerOn&quot;: true,&#xd;
    &quot;isPublish&quot;: true,&#xd;
    &quot;duration&quot;: 24,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;assessmentBuilderUnitList&quot;: [&#xd;
        {&#xd;
            &quot;unitName&quot;: &quot;Unit 1&quot;,&#xd;
            &quot;unitNo&quot;: 1,&#xd;
            &quot;unitId&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderClassificationList&quot;: [&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 1,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 2,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 3,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 6,&#xd;
            &quot;assessmentQuestionCount&quot;: 12&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 7,&#xd;
            &quot;assessmentQuestionCount&quot;: 12&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderSessionList&quot;: [&#xd;
        {&#xd;
            &quot;sessionId&quot;: 2624,&#xd;
            &quot;globalSessionTitle&quot;: &quot;2015级QAclass&quot;,&#xd;
            &quot;checkFlag&quot;: false,&#xd;
            &quot;sessItemId&quot;: 0,&#xd;
            &quot;isRequire&quot;: true,&#xd;
            &quot;isRequiredEmend&quot;: false,&#xd;
            &quot;isChecked&quot;: true,&#xd;
            &quot;selectAsk&quot;: [&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequire&quot;: true&#xd;
                },&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequiredEmend&quot;: true,&#xd;
                    &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;suitRelAssessmentBuilderList&quot;: [&#xd;
        {&#xd;
            &quot;suitId&quot;: 11062&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/publishAssessment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">assessmentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.assessmentIds[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkInfo--口语句子" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkScoreNew(获取sessionUserTrackingId)--口语句子" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkScoreNew</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="launchTheAssessmentHomework--口语句子" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionUserTrackingId_g1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="randomNum" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0.4781015824927144</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">randomNum</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/launchTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, 5866)));


function prepareSubmitData(data, userId){
        var $scope;
        var submitData = {
            //current_index: 0,//当前carousel的index
                AssessmentType: data[&quot;AssessmentType&quot;],
          AssessmentId: data[&quot;AssessmentId&quot;],
          SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
          UserId: 5866,
          LanguageId: data[&quot;LanguageId&quot;],
          IsPreview: data[&quot;IsPreview&quot;],
          CategoryIndex: data[&quot;CategoryIndex&quot;],
          GroupIndex: data[&quot;GroupIndex&quot;],
          QuestionIndex: data[&quot;QuestionIndex&quot;],
          ActiveIndex: data[&quot;ActiveIndex&quot;],
          //设置测试为全部提交
          IsAssessmentCompleted: true,
          QuestionCategorys: [],
          assessmentId: ${assessmentId},
          SessionId: data[&quot;SessionId&quot;]
        };
        
        log.info(submitData);

	for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;],
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;],
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                }
            }
        }
        return submitData;
    }</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveTheAssessmentHomework--口语句子" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${submitData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/saveTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId}    ${sessionUserTrackingId_g1}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deleteHomework--口语句子" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;assessmentId&quot;: &quot;${assessmentId}&quot;,&#xd;
    &quot;sessionId&quot;: 2624&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/teacher/deleteHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="信息转述题型验证" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519903893000</longProp>
        <longProp name="ThreadGroup.end_time">1519903893000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="getToken" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="setHomeworkSuitSeries-创建套题册" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesName&quot;: &quot;信息转述${num}&quot;,&#xd;
	&quot;homeworkTextbookId&quot;: 10,&#xd;
	&quot;description&quot;: &quot;测试&quot;,&#xd;
	&quot;tagLines&quot;: [{&#xd;
		&quot;tagHeaderId&quot;: 10002,&#xd;
		&quot;tagLineId&quot;: 10667&#xd;
	}]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/setHomeworkSuitSeries</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shss_suitSeriesId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">shss_suitSeriesId</stringProp>
            <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String shss_suitSeriesId = vars.get(&quot;shss_suitSeriesIdd&quot;);
props.put(&quot;shss_suitSeriesId&quot;, shss_suitSeriesId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="questionPool-关联题库" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/questionPool?subjectId=1&amp;page=1&amp;pageSize=10&amp;title=信息转述</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addSessions-添加班级" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesId&quot;: ${shss_suitSeriesId},&#xd;
	&quot;addSessionIdList&quot;: [2624],&#xd;
	&quot;removeSessionIdList&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suitSeries/addSessions</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="combine-套题发布" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitIds&quot;:[${suitId}],&#xd;
	&quot;status&quot;:&quot;RELEASE&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suit/combine</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="homeworkSuit-套题保存（关联题库和关联套题册）" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;articles&quot;: [],&#xd;
	&quot;homeworkSuit&quot;: {&#xd;
		&quot;suitId&quot;: null,&#xd;
		&quot;suitName&quot;: &quot;信息转述${num}&quot;,&#xd;
		&quot;displayOrder&quot;: &quot;&quot;,&#xd;
		&quot;startDate&quot;: null,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;homeworkType&quot;: &quot;SELECTED_PRACTICE_SUIT&quot;,&#xd;
		&quot;suitType&quot;: &quot;ORAL_PRACTICE&quot;,&#xd;
		&quot;subjectId&quot;: 1,&#xd;
		&quot;objectVersionNumber&quot;: 1,&#xd;
		&quot;homeworkTextbookSeriesId&quot;: 2,&#xd;
		&quot;homeworkTextbookId&quot;: 10,&#xd;
		&quot;homeworkSuitUnitList&quot;: [{&#xd;
			&quot;homeworkUnitId&quot;: 189&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 190&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 191&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 192&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 193&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 194&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 195&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 196&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 197&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 576&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 199&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 200&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 681&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 635&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 654&#xd;
		}],&#xd;
		&quot;homeworkSuitRelSeriesList&quot;: [{&#xd;
			&quot;suitSeriesId&quot;: ${shss_suitSeriesId}&#xd;
		}],&#xd;
		&quot;tagLines&quot;: [],&#xd;
		&quot;suitDistrictsList&quot;: [{&#xd;
			&quot;provinceId&quot;: &quot;&quot;,&#xd;
			&quot;cityId&quot;: &quot;&quot;&#xd;
		}]&#xd;
	},&#xd;
	&quot;pools&quot;: [{&#xd;
		&quot;poolId&quot;: ${poolId},&#xd;
		&quot;questionCount&quot;: 15&#xd;
	}],&#xd;
	&quot;oralParagraphs&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/homeworkSuit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取suitId1" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">suitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.suitId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String suitId = vars.get(&quot;suitId&quot;);
props.put(&quot;suitId&quot;, suitId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="publishAssessment布置作业--信息转述" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;textbookSeriesId&quot;: 1,&#xd;
    &quot;textbookId&quot;: 1,&#xd;
    &quot;assessmentBuilderType&quot;: 2,&#xd;
    &quot;title&quot;: &quot;${num}信息转述20180226&quot;,&#xd;
    &quot;beginDate&quot;: &quot;2018-05-08&quot;,&#xd;
    &quot;endDate&quot;: &quot;2025-03-08&quot;,&#xd;
    &quot;isOptionRandom&quot;: true,&#xd;
    &quot;isQuestionFeedback&quot;: true,&#xd;
    &quot;showSubTitle&quot;: false,&#xd;
    &quot;isTimerOn&quot;: true,&#xd;
    &quot;isPublish&quot;: true,&#xd;
    &quot;duration&quot;: 15,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;assessmentBuilderUnitList&quot;: [&#xd;
        {&#xd;
            &quot;unitName&quot;: &quot;Unit 1&quot;,&#xd;
            &quot;unitNo&quot;: 1,&#xd;
            &quot;unitId&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderClassificationList&quot;: [&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 1,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 2,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 3,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 6,&#xd;
            &quot;assessmentQuestionCount&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 7,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderSessionList&quot;: [&#xd;
        {&#xd;
            &quot;sessionId&quot;: 2624,&#xd;
            &quot;globalSessionTitle&quot;: &quot;2015级QAclass&quot;,&#xd;
            &quot;checkFlag&quot;: false,&#xd;
            &quot;sessItemId&quot;: 0,&#xd;
            &quot;isRequire&quot;: true,&#xd;
            &quot;isRequiredEmend&quot;: false,&#xd;
            &quot;isChecked&quot;: true,&#xd;
            &quot;selectAsk&quot;: [&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequire&quot;: true&#xd;
                },&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequiredEmend&quot;: true,&#xd;
                    &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;suitRelAssessmentBuilderList&quot;: [&#xd;
        {&#xd;
            &quot;suitId&quot;: 11063&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/publishAssessment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">assessmentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.assessmentIds[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkInfo--信息转述" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkScoreNew(获取sessionUserTrackingId)--信息转述" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkScoreNew</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="launchTheAssessmentHomework--信息转述" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionUserTrackingId_g1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="randomNum" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0.4781015824927144</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">randomNum</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/launchTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, 5866)));


function prepareSubmitData(data, userId){
        var $scope;
        var  currentQuestionNumber;
        var submitData = {
            //current_index: 0,//当前carousel的index
                AssessmentType: data[&quot;AssessmentType&quot;],
          AssessmentId: data[&quot;AssessmentId&quot;],
          SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
          UserId: 5866,
          LanguageId: data[&quot;LanguageId&quot;],
          IsPreview: data[&quot;IsPreview&quot;],
          CategoryIndex: data[&quot;CategoryIndex&quot;],
          GroupIndex: data[&quot;GroupIndex&quot;],
          QuestionIndex: data[&quot;QuestionIndex&quot;],
          ActiveIndex: data[&quot;ActiveIndex&quot;],
          //设置测试为全部提交
          IsAssessmentCompleted: true,
          QuestionCategorys: [],
          assessmentId: ${assessmentId},
          SessionId: data[&quot;SessionId&quot;]
        };
        
        log.info(submitData);

	for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;],
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;],
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9://听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                   
             		case 12://话题简述
						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];

						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;QuestionTypeId&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionTypeId&quot;];
                              submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;QuestionTypeTitle&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionTypeTitle&quot;];
                              currentQuestionNumber++;
						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
							isChange: data[&quot;$scope.IsReview&quot;] ? false : true,//用户的选择是否改变过
							GuessWordTimeSpent:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
							 ArticleId: -1,
							 questionNumber: currentQuestionNumber,
							 QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
							 IsQuestionCorrect:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
							 AudioPath:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
							 OralScore:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
							 StandardScore:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
							 ReadCount:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
							 UserResponse: [&quot;&quot;],
                             BlankAnswers: [&quot;&quot;],
                             OralSentenceResponse: [],
							 EvaluationResults:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;EvaluationResults&quot;] === null ? {
                                        fluency: 0,
                                        integrity: 0,
                                        pronunciation: 0
                                    } : data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;EvaluationResults&quot;]
							});
							 break;
             		
                }
            }
        }
        return submitData;
    }</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveTheAssessmentHomework--信息转述" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${submitData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/saveTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId}    ${sessionUserTrackingId_g1}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deleteHomework--信息转述" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;assessmentId&quot;: &quot;${assessmentId}&quot;,&#xd;
    &quot;sessionId&quot;: 2624&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/teacher/deleteHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="话题简述英型验证" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519903893000</longProp>
        <longProp name="ThreadGroup.end_time">1519903893000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="getToken" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="setHomeworkSuitSeries-创建套题册" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesName&quot;: &quot;话题简述英${num}&quot;,&#xd;
	&quot;homeworkTextbookId&quot;: 10,&#xd;
	&quot;description&quot;: &quot;测试&quot;,&#xd;
	&quot;tagLines&quot;: [{&#xd;
		&quot;tagHeaderId&quot;: 10002,&#xd;
		&quot;tagLineId&quot;: 10667&#xd;
	}]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/setHomeworkSuitSeries</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shss_suitSeriesId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">shss_suitSeriesId</stringProp>
            <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String shss_suitSeriesId = vars.get(&quot;shss_suitSeriesIdd&quot;);
props.put(&quot;shss_suitSeriesId&quot;, shss_suitSeriesId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="questionPool-关联题库" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/questionPool?subjectId=1&amp;page=1&amp;pageSize=10&amp;title=话题简述英</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addSessions-添加班级" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesId&quot;: ${shss_suitSeriesId},&#xd;
	&quot;addSessionIdList&quot;: [2624],&#xd;
	&quot;removeSessionIdList&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suitSeries/addSessions</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="combine-套题发布" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitIds&quot;:[${suitId}],&#xd;
	&quot;status&quot;:&quot;RELEASE&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suit/combine</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="homeworkSuit-套题保存（关联题库和关联套题册）" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;articles&quot;: [],&#xd;
	&quot;homeworkSuit&quot;: {&#xd;
		&quot;suitId&quot;: null,&#xd;
		&quot;suitName&quot;: &quot;话题简述英${num}&quot;,&#xd;
		&quot;displayOrder&quot;: &quot;&quot;,&#xd;
		&quot;startDate&quot;: null,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;homeworkType&quot;: &quot;SELECTED_PRACTICE_SUIT&quot;,&#xd;
		&quot;suitType&quot;: &quot;ORAL_PRACTICE&quot;,&#xd;
		&quot;subjectId&quot;: 1,&#xd;
		&quot;objectVersionNumber&quot;: 1,&#xd;
		&quot;homeworkTextbookSeriesId&quot;: 2,&#xd;
		&quot;homeworkTextbookId&quot;: 10,&#xd;
		&quot;homeworkSuitUnitList&quot;: [{&#xd;
			&quot;homeworkUnitId&quot;: 189&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 190&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 191&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 192&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 193&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 194&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 195&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 196&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 197&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 576&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 199&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 200&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 681&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 635&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 654&#xd;
		}],&#xd;
		&quot;homeworkSuitRelSeriesList&quot;: [{&#xd;
			&quot;suitSeriesId&quot;: ${shss_suitSeriesId}&#xd;
		}],&#xd;
		&quot;tagLines&quot;: [],&#xd;
		&quot;suitDistrictsList&quot;: [{&#xd;
			&quot;provinceId&quot;: &quot;&quot;,&#xd;
			&quot;cityId&quot;: &quot;&quot;&#xd;
		}]&#xd;
	},&#xd;
	&quot;pools&quot;: [{&#xd;
		&quot;poolId&quot;: ${poolId},&#xd;
		&quot;questionCount&quot;: 15&#xd;
	}],&#xd;
	&quot;oralParagraphs&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/homeworkSuit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取suitId1" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">suitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.suitId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String suitId = vars.get(&quot;suitId&quot;);
props.put(&quot;suitId&quot;, suitId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="publishAssessment布置作业--话题简述英" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;textbookSeriesId&quot;: 1,&#xd;
    &quot;textbookId&quot;: 1,&#xd;
    &quot;assessmentBuilderType&quot;: 2,&#xd;
    &quot;title&quot;: &quot;${num}话题简述英20180226&quot;,&#xd;
    &quot;beginDate&quot;: &quot;2018-05-08&quot;,&#xd;
    &quot;endDate&quot;: &quot;2025-03-08&quot;,&#xd;
    &quot;isOptionRandom&quot;: true,&#xd;
    &quot;isQuestionFeedback&quot;: true,&#xd;
    &quot;showSubTitle&quot;: false,&#xd;
    &quot;isTimerOn&quot;: true,&#xd;
    &quot;isPublish&quot;: true,&#xd;
    &quot;duration&quot;: 15,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;assessmentBuilderUnitList&quot;: [&#xd;
        {&#xd;
            &quot;unitName&quot;: &quot;Unit 1&quot;,&#xd;
            &quot;unitNo&quot;: 1,&#xd;
            &quot;unitId&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderClassificationList&quot;: [&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 1,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 2,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 3,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 6,&#xd;
            &quot;assessmentQuestionCount&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 7,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderSessionList&quot;: [&#xd;
        {&#xd;
            &quot;sessionId&quot;: 2624,&#xd;
            &quot;globalSessionTitle&quot;: &quot;2015级QAclass&quot;,&#xd;
            &quot;checkFlag&quot;: false,&#xd;
            &quot;sessItemId&quot;: 0,&#xd;
            &quot;isRequire&quot;: true,&#xd;
            &quot;isRequiredEmend&quot;: false,&#xd;
            &quot;isChecked&quot;: true,&#xd;
            &quot;selectAsk&quot;: [&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequire&quot;: true&#xd;
                },&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequiredEmend&quot;: true,&#xd;
                    &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;suitRelAssessmentBuilderList&quot;: [&#xd;
        {&#xd;
            &quot;suitId&quot;: 11064&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/publishAssessment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">assessmentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.assessmentIds[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkInfo--话题简述英" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkScoreNew(获取sessionUserTrackingId)--话题简述英" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkScoreNew</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="launchTheAssessmentHomework--话题简述英" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionUserTrackingId_g1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="randomNum" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0.4781015824927144</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">randomNum</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/launchTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, 5866)));


function prepareSubmitData(data, userId){
        var $scope;
        var  currentQuestionNumber;
        var submitData = {
            //current_index: 0,//当前carousel的index
                AssessmentType: data[&quot;AssessmentType&quot;],
          AssessmentId: data[&quot;AssessmentId&quot;],
          SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
          UserId: 5866,
          LanguageId: data[&quot;LanguageId&quot;],
          IsPreview: data[&quot;IsPreview&quot;],
          CategoryIndex: data[&quot;CategoryIndex&quot;],
          GroupIndex: data[&quot;GroupIndex&quot;],
          QuestionIndex: data[&quot;QuestionIndex&quot;],
          ActiveIndex: data[&quot;ActiveIndex&quot;],
          //设置测试为全部提交
          IsAssessmentCompleted: true,
          QuestionCategorys: [],
          assessmentId: ${assessmentId},
          SessionId: data[&quot;SessionId&quot;]
        };
        
        log.info(submitData);

	for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;],
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;],
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                        case 12://话题简述
						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
						
						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;QuestionTypeId&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionTypeId&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;QuestionTypeTitle&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionTypeTitle&quot;];
                              currentQuestionNumber++;
						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
							isChange: data[&quot;$scope.IsReview&quot;] ? false : true,//用户的选择是否改变过
							GuessWordTimeSpent:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
							 ArticleId: -1,
							 questionNumber: currentQuestionNumber,
							 QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
							 IsQuestionCorrect:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
							 AudioPath:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
							 OralScore:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
							 StandardScore:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
							 ReadCount:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
							 UserResponse: [&quot;&quot;],
                                    BlankAnswers: [&quot;&quot;],
                                    OralSentenceResponse: [],
							 EvaluationResults:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;EvaluationResults&quot;] === null ? {
                                        fluency: 0,
                                        integrity: 0,
                                        pronunciation: 0
                                    } : data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;EvaluationResults&quot;]
							});
							 break;
                }
            }
        }
        return submitData;
    }</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveTheAssessmentHomework--话题简述英" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${submitData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/saveTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId}    ${sessionUserTrackingId_g1}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deleteHomework--话题简述英" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;assessmentId&quot;: &quot;${assessmentId}&quot;,&#xd;
    &quot;sessionId&quot;: 2624&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/teacher/deleteHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="话题简述中型验证" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519903893000</longProp>
        <longProp name="ThreadGroup.end_time">1519903893000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="getToken" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="setHomeworkSuitSeries-创建套题册" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesName&quot;: &quot;话题简述中${num}&quot;,&#xd;
	&quot;homeworkTextbookId&quot;: 10,&#xd;
	&quot;description&quot;: &quot;测试&quot;,&#xd;
	&quot;tagLines&quot;: [{&#xd;
		&quot;tagHeaderId&quot;: 10002,&#xd;
		&quot;tagLineId&quot;: 10667&#xd;
	}]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/setHomeworkSuitSeries</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shss_suitSeriesId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">shss_suitSeriesId</stringProp>
            <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String shss_suitSeriesId = vars.get(&quot;shss_suitSeriesIdd&quot;);
props.put(&quot;shss_suitSeriesId&quot;, shss_suitSeriesId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="questionPool-关联题库" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/questionPool?subjectId=1&amp;page=1&amp;pageSize=10&amp;title=话题简述中</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addSessions-添加班级" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitSeriesId&quot;: ${shss_suitSeriesId},&#xd;
	&quot;addSessionIdList&quot;: [2624],&#xd;
	&quot;removeSessionIdList&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suitSeries/addSessions</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取poolId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">poolId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;poolId&quot;:(.*?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="combine-套题发布" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;suitIds&quot;:[${suitId}],&#xd;
	&quot;status&quot;:&quot;RELEASE&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/suit/combine</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="homeworkSuit-套题保存（关联题库和关联套题册）" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;articles&quot;: [],&#xd;
	&quot;homeworkSuit&quot;: {&#xd;
		&quot;suitId&quot;: null,&#xd;
		&quot;suitName&quot;: &quot;话题简述中${num}&quot;,&#xd;
		&quot;displayOrder&quot;: &quot;&quot;,&#xd;
		&quot;startDate&quot;: null,&#xd;
		&quot;endDate&quot;: null,&#xd;
		&quot;homeworkType&quot;: &quot;SELECTED_PRACTICE_SUIT&quot;,&#xd;
		&quot;suitType&quot;: &quot;ORAL_PRACTICE&quot;,&#xd;
		&quot;subjectId&quot;: 1,&#xd;
		&quot;objectVersionNumber&quot;: 1,&#xd;
		&quot;homeworkTextbookSeriesId&quot;: 2,&#xd;
		&quot;homeworkTextbookId&quot;: 10,&#xd;
		&quot;homeworkSuitUnitList&quot;: [{&#xd;
			&quot;homeworkUnitId&quot;: 189&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 190&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 191&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 192&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 193&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 194&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 195&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 196&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 197&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 576&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 199&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 200&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 681&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 635&#xd;
		}, {&#xd;
			&quot;homeworkUnitId&quot;: 654&#xd;
		}],&#xd;
		&quot;homeworkSuitRelSeriesList&quot;: [{&#xd;
			&quot;suitSeriesId&quot;: ${shss_suitSeriesId}&#xd;
		}],&#xd;
		&quot;tagLines&quot;: [],&#xd;
		&quot;suitDistrictsList&quot;: [{&#xd;
			&quot;provinceId&quot;: &quot;&quot;,&#xd;
			&quot;cityId&quot;: &quot;&quot;&#xd;
		}]&#xd;
	},&#xd;
	&quot;pools&quot;: [{&#xd;
		&quot;poolId&quot;: ${poolId},&#xd;
		&quot;questionCount&quot;: 15&#xd;
	}],&#xd;
	&quot;oralParagraphs&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/homework/v1/sec/homeworkSuit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">精选练习</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取suitId1" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">suitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.suitId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">提取assessmentId</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String suitId = vars.get(&quot;suitId&quot;);
props.put(&quot;suitId&quot;, suitId);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="publishAssessment布置作业--话题简述中" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;textbookSeriesId&quot;: 1,&#xd;
    &quot;textbookId&quot;: 1,&#xd;
    &quot;assessmentBuilderType&quot;: 2,&#xd;
    &quot;title&quot;: &quot;${num}话题简述中20180226&quot;,&#xd;
    &quot;beginDate&quot;: &quot;2018-05-08&quot;,&#xd;
    &quot;endDate&quot;: &quot;2025-03-08&quot;,&#xd;
    &quot;isOptionRandom&quot;: true,&#xd;
    &quot;isQuestionFeedback&quot;: true,&#xd;
    &quot;showSubTitle&quot;: false,&#xd;
    &quot;isTimerOn&quot;: true,&#xd;
    &quot;isPublish&quot;: true,&#xd;
    &quot;duration&quot;: 15,&#xd;
    &quot;subjectId&quot;: 1,&#xd;
    &quot;assessmentBuilderUnitList&quot;: [&#xd;
        {&#xd;
            &quot;unitName&quot;: &quot;Unit 1&quot;,&#xd;
            &quot;unitNo&quot;: 1,&#xd;
            &quot;unitId&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderClassificationList&quot;: [&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 1,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 2,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 3,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 6,&#xd;
            &quot;assessmentQuestionCount&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;assessmentClassification&quot;: 7,&#xd;
            &quot;assessmentQuestionCount&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;assessmentBuilderSessionList&quot;: [&#xd;
        {&#xd;
            &quot;sessionId&quot;: 2624,&#xd;
            &quot;globalSessionTitle&quot;: &quot;2015级QAclass&quot;,&#xd;
            &quot;checkFlag&quot;: false,&#xd;
            &quot;sessItemId&quot;: 0,&#xd;
            &quot;isRequire&quot;: true,&#xd;
            &quot;isRequiredEmend&quot;: false,&#xd;
            &quot;isChecked&quot;: true,&#xd;
            &quot;selectAsk&quot;: [&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequire&quot;: true&#xd;
                },&#xd;
                {&#xd;
                    &quot;sessionId&quot;: 2624,&#xd;
                    &quot;isRequiredEmend&quot;: true,&#xd;
                    &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;emendTypeCode&quot;: &quot;ERROR_INTENSIFY_QUESTIONS&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;suitRelAssessmentBuilderList&quot;: [&#xd;
        {&#xd;
            &quot;suitId&quot;: 11065&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/publishAssessment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">assessmentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.assessmentIds[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkInfo--话题简述中" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkScoreNew(获取sessionUserTrackingId)--话题简述中" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/getHomeworkScoreNew</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;userId&quot;:5866,&quot;sessionUserTrackingId&quot;:(.*?),&quot;fullName&quot;:&quot;朴明春&quot;,</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="launchTheAssessmentHomework--话题简述中" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionUserTrackingId_g1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="randomNum" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0.4781015824927144</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">randomNum</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2624</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/launchTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="获取Save的SubmitData数据" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
    var jsonString = prev.getResponseDataAsString();
    var response = JSON.parse(jsonString);
}catch(err){
    AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
    AssertionResult.setFailure(true);
}

//log.info(&quot;launch的数据结果&quot; + jsonString);
//log.info(&quot;方法返回值&quot; + JSON.stringify(prepareSubmitData(response, &quot;5881&quot;).QuestionCategorys));
//vars.put(&quot;submitData&quot;,prepareSubmitData(response, 5881)toJSON());
vars.put(&quot;submitData&quot;,JSON.stringify(prepareSubmitData(response, 5866)));


function prepareSubmitData(data, userId){
        var $scope;
        var  currentQuestionNumber;
        var submitData = {
            //current_index: 0,//当前carousel的index
                AssessmentType: data[&quot;AssessmentType&quot;],
          AssessmentId: data[&quot;AssessmentId&quot;],
          SessionUserTrackingId: data[&quot;SessionUserTrackingId&quot;],
          UserId: 5866,
          LanguageId: data[&quot;LanguageId&quot;],
          IsPreview: data[&quot;IsPreview&quot;],
          CategoryIndex: data[&quot;CategoryIndex&quot;],
          GroupIndex: data[&quot;GroupIndex&quot;],
          QuestionIndex: data[&quot;QuestionIndex&quot;],
          ActiveIndex: data[&quot;ActiveIndex&quot;],
          //设置测试为全部提交
          IsAssessmentCompleted: true,
          QuestionCategorys: [],
          assessmentId: ${assessmentId},
          SessionId: data[&quot;SessionId&quot;]
        };
        
        log.info(submitData);

	for (var i = 0; i &lt; data[&quot;QuestionCategorys&quot;].length; i++) {
            submitData[&quot;QuestionCategorys&quot;][i] = {
                CategoryId: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryId&quot;],
                CategoryTitle: data[&quot;QuestionCategorys&quot;][i][&quot;CategoryTitle&quot;],
                QuestionGroups: []
            };
            for (var j = 0; j &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;].length; j++) {
                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j] = {
                    GroupType: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;],
                    UserTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;UserTimeSpent&quot;],
                    Questions: []
                }
                switch (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;GroupType&quot;]) {
                    case 1: //词汇
                    case 7: //词汇
                    case 8: //词汇
                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;FeedbackViewed&quot;];
                        var options = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;];
                        var inputTypes = new Array();
                        for (var q = 0; q &lt; options[&quot;length&quot;]; q++) {
                            inputTypes.push(options[q][&quot;InputType&quot;]);
                        }
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsQuestionCorrect&quot;],
                            UserResponse: [],
                            InputTypes: inputTypes,
                            BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;UserResponse&quot;],
                            IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;IsMoreError&quot;]
                        });
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;].length; m++) {
                            if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][0][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Question&quot;][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                            }
                        }
                        break;
                    case 2: //阅读
                    case 10: //复杂听力填空
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;ArticleId&quot;],
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;QuestionId&quot;],
                                UserResponse: [],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;IsMoreError&quot;]

                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;] === true) {
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }

                            }

                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Article&quot;][&quot;ArticleQuestions&quot;][k][&quot;Options&quot;][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;BlankAnswers&quot;].push(m);
                                }
                            }
                        }

                        break;
                    case 3: //视频
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Video&quot;][&quot;VideoQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                    case 4: {//单词跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 6: {//句子跟读
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][0][&quot;FeedbackViewed&quot;];
                        for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;].length; m++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                GuessWordTimeSpent: 0,
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;IsQuestionCorrect&quot;],
                                AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;AudioPath&quot;],
                                OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralScore&quot;],
                                StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;StandardScore&quot;],
                                ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;ReadCount&quot;],
                                UserResponse: [&quot;&quot;],
                                BlankAnswers: [&quot;&quot;],
                                OralSentenceResponse: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralParagraph&quot;][&quot;OralParagraphQuestions&quot;][m][&quot;OralSentenceResponse&quot;]
                            });
                        }
                        break;
                    }
                    case 5: {//猜词游戏
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                            GuessWordTimeSpent: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
                            ArticleId: -1,
                            QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
                            IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;],
                            AudioPath: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
                            OralScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
                            StandardScore: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
                            ReadCount: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
                            UserResponse: [&quot;&quot;],
                            BlankAnswers: [&quot;&quot;],
                            OralSentenceResponse: []
                        });
                        break;
                    }
                    case 9: //听力选择
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;FeedbackViewed&quot;];
                        for (var k = 0; k &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;].length; k++) {
                            submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
                                ArticleId: -1,
                                QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;QuestionId&quot;],
                                IsQuestionCorrect: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsQuestionCorrect&quot;],
                                BlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                UserResponse: [],
                                traceBlankAnswers: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;UserResponse&quot;],
                                IsMoreError: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;IsMoreError&quot;]
                            });
                            for (var m = 0; m &lt; data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;].length; m++) {
                                if (data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;IsSelectedByUser&quot;]) {//是否被用户选择
                                    submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;][k][&quot;UserResponse&quot;].push(data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Audio&quot;][&quot;AudioQuestions&quot;][k][&quot;Options&quot;][m][&quot;SortOrder&quot;]);
                                }
                            }
                        }
                        break;
                        case 12://话题简述
						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;FeedbackViewed&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;FeedbackViewed&quot;];
						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;QuestionTypeId&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionTypeId&quot;];
                        submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;QuestionTypeTitle&quot;] = data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionTypeTitle&quot;];
                              currentQuestionNumber++;
						submitData[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;Questions&quot;].push({
							isChange: data[&quot;$scope.IsReview&quot;] ? false : true,//用户的选择是否改变过
							GuessWordTimeSpent:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;GuessWordTimeSpent&quot;],
							 ArticleId: -1,
							 questionNumber: currentQuestionNumber,
							 QuestionId: data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;QuestionId&quot;],
							 IsQuestionCorrect:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;IsQuestionCorrect&quot;] === 1 ? 1 : 0,
							 AudioPath:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;AudioPath&quot;],
							 OralScore:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;OralScore&quot;],
							 StandardScore:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;StandardScore&quot;],
							 ReadCount:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;ReadCount&quot;],
							 UserResponse: [&quot;&quot;],
                             BlankAnswers: [&quot;&quot;],
                             OralSentenceResponse: [],
							 EvaluationResults:data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;EvaluationResults&quot;] === null ? {
                                        fluency: 0,
                                        integrity: 0,
                                        pronunciation: 0
                                    } : data[&quot;QuestionCategorys&quot;][i][&quot;QuestionGroups&quot;][j][&quot;OralQuestion&quot;][&quot;EvaluationResults&quot;]
							});
							 break;
                }
            }
        }
        return submitData;
    }</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion(code或数据异常)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">try{
	var jsonString = prev.getResponseDataAsString();
	var response = JSON.parse(jsonString);
}catch(err){
	AssertionResult.setFailureMessage(&quot;cannot parse json object from response&quot;);
	AssertionResult.setFailure(true);
}

if(response.QuestionCategorys.length &gt; 0){
//	log.info(&quot;获取题目详情_id:&quot;+response.QuestionCategorys.length);
	AssertionResult.setFailure(false);
}else{
	AssertionResult.setFailureMessage(&quot;the parameter is empty&quot;);	
	AssertionResult.setFailure(true);
}</stringProp>
          </BSFAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveTheAssessmentHomework--话题简述中" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${submitData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/saveTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId}    ${sessionUserTrackingId_g1}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deleteHomework--话题简述中" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;assessmentId&quot;: &quot;${assessmentId}&quot;,&#xd;
    &quot;sessionId&quot;: 2624&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/teacher/v1/sec/teacher/deleteHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${assessmentId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
