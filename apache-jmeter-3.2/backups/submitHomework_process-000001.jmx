<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(host,test.zhishinet.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(username,sh000124)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="passwd" elementType="Argument">
            <stringProp name="Argument.name">passwd</stringProp>
            <stringProp name="Argument.value">${__P(password,welcome123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">${__V(${type} ${token})}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">sh000124</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">welcome123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="randomdata" elementType="Argument">
            <stringProp name="Argument.name">randomdata</stringProp>
            <stringProp name="Argument.value">${__Random(0,999,randomdata)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="getToken" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;: &quot;${username}&quot;,&#xd;
	&quot;password&quot;: &quot;${password}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/zauth/v1/token/access</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="type" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">type</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token_type&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="重置练习册" enabled="false"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="reset-重置练习册" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;sessionUserTrackingId&quot;: 54566131,&#xd;
    &quot;subjectId&quot;: &quot;2&quot;,&#xd;
    &quot;resetReason&quot;: &quot;测试重置&quot;,&#xd;
    &quot;description&quot;: &quot;测试重置&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">/api/management-console/sec/playlist/reset</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="912299901">assessmentId</stringProp>
              <stringProp name="1942105235">sessionUserTrackingId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-427484064">
                <stringProp name="1448669799">101559</stringProp>
                <stringProp name="1962870197">1058106</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="重置作业" enabled="false"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="reset-重置作业" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;sessionUserTrackingId&quot;: ${sessionUserTrackingId},&#xd;
    &quot;subjectId&quot;: &quot;1&quot;,&#xd;
    &quot;resetReason&quot;: &quot;testReset&quot;,&#xd;
    &quot;description&quot;: &quot;testReset&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">/api/management-console/v1/sec/homework/reset</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="912299901">assessmentId</stringProp>
              <stringProp name="1942105235">sessionUserTrackingId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-427484064">
                <stringProp name="1448669799">101559</stringProp>
                <stringProp name="1962870197">1058106</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">40</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取用户信息" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="usersIdentity-获取用户学生信息" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="identity" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">student</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">identity</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">api/user-profile/v1/sec/users</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取userId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">userId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;ubuserId&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取作业列表(未完成)" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeWorkList-获取作业列表(未完成)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="orderBy" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">EndDate%20DESC,CreatedOn%20DESC&amp;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">orderBy</stringProp>
              </elementProp>
              <elementProp name="currentPage" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">currentPage</stringProp>
              </elementProp>
              <elementProp name="pageSize" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">pageSize</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">UNFINISHED</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">status</stringProp>
              </elementProp>
              <elementProp name="history" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">history</stringProp>
              </elementProp>
              <elementProp name="subjectId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">subjectId</stringProp>
              </elementProp>
              <elementProp name="timestamp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1511748704071</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">timestamp</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">/api/subsystem/homework/v1/sec/getHomeWorkList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取assessmentId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">assessmentId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;assessmentId&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;sessionId&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取sessionUserTrackingId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionUserTrackingId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;sessionUserTrackingId&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="获取作业答题详情" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="launchTheAssessmentHomework-获取作业答题详情" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="assessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">assessmentId</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionid</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionUserTrackingId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
              <elementProp name="randomNum" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0.04811489731845753</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">randomNum</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/launchTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业答题" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveTheAssessmentHomework-作业答题" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;AssessmentType&quot;: 2,&#xd;
    &quot;AssessmentId&quot;: ${assessmentId},&#xd;
    &quot;SessionUserTrackingId&quot;: ${sessionUserTrackingId},&#xd;
    &quot;UserId&quot;: ${userId},&#xd;
    &quot;LanguageId&quot;: 3,&#xd;
    &quot;IsPreview&quot;: false,&#xd;
    &quot;CategoryIndex&quot;: 0,&#xd;
    &quot;GroupIndex&quot;: 0,&#xd;
    &quot;QuestionIndex&quot;: 2,&#xd;
    &quot;ActiveIndex&quot;: 0,&#xd;
    &quot;IsAssessmentCompleted&quot;: false,&#xd;
    &quot;QuestionCategorys&quot;: [&#xd;
        {&#xd;
            &quot;CategoryId&quot;: 1,&#xd;
            &quot;CategoryTitle&quot;: &quot;听力理解&quot;,&#xd;
            &quot;QuestionGroups&quot;: [&#xd;
                {&#xd;
                    &quot;GroupType&quot;: 3,&#xd;
                    &quot;UserTimeSpent&quot;: 1039,&#xd;
                    &quot;Questions&quot;: [&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193428,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                3&#xd;
                            ]&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193429,&#xd;
                            &quot;IsQuestionCorrect&quot;: 1,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                3&#xd;
                            ]&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193430,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                3&#xd;
                            ]&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193431,&#xd;
                            &quot;IsQuestionCorrect&quot;: 1,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                2&#xd;
                            ]&#xd;
                        }&#xd;
                    ],&#xd;
                    &quot;FeedbackViewed&quot;: true&#xd;
                },&#xd;
                {&#xd;
                    &quot;GroupType&quot;: 3,&#xd;
                    &quot;UserTimeSpent&quot;: 63,&#xd;
                    &quot;Questions&quot;: [&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193432,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193433,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193434,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193435,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        }&#xd;
                    ],&#xd;
                    &quot;FeedbackViewed&quot;: false&#xd;
                },&#xd;
                {&#xd;
                    &quot;GroupType&quot;: 3,&#xd;
                    &quot;UserTimeSpent&quot;: 7,&#xd;
                    &quot;Questions&quot;: [&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193436,&#xd;
                            &quot;IsQuestionCorrect&quot;: 1,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;4&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                4&#xd;
                            ]&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193437,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193438,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193439,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        }&#xd;
                    ],&#xd;
                    &quot;FeedbackViewed&quot;: false&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;SessionId&quot;: ${sessionId},&#xd;
    &quot;requiredEmend&quot;: false&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/saveTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="912299901">assessmentId</stringProp>
              <stringProp name="1942105235">sessionUserTrackingId</stringProp>
              <stringProp name="607796817">sessionId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="207928538">
                <stringProp name="1448669799">101559</stringProp>
                <stringProp name="1962870197">1058106</stringProp>
                <stringProp name="1543046">2624</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="52469">500</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">40</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="查看答案" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveTheAssessmentHomework-查看答案" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;AssessmentType&quot;: 2,&#xd;
    &quot;AssessmentId&quot;: ${assessmentId},&#xd;
    &quot;SessionUserTrackingId&quot;: ${sessionUserTrackingId},&#xd;
    &quot;UserId&quot;: ${userId},&#xd;
    &quot;LanguageId&quot;: 3,&#xd;
    &quot;IsPreview&quot;: false,&#xd;
    &quot;CategoryIndex&quot;: 0,&#xd;
    &quot;GroupIndex&quot;: 1,&#xd;
    &quot;QuestionIndex&quot;: 0,&#xd;
    &quot;ActiveIndex&quot;: 0,&#xd;
    &quot;IsAssessmentCompleted&quot;: true,&#xd;
    &quot;QuestionCategorys&quot;: [&#xd;
        {&#xd;
            &quot;CategoryId&quot;: 1,&#xd;
            &quot;CategoryTitle&quot;: &quot;听力理解&quot;,&#xd;
            &quot;QuestionGroups&quot;: [&#xd;
                {&#xd;
                    &quot;GroupType&quot;: 3,&#xd;
                    &quot;UserTimeSpent&quot;: 1039,&#xd;
                    &quot;Questions&quot;: [&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193428,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                3&#xd;
                            ]&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193429,&#xd;
                            &quot;IsQuestionCorrect&quot;: 1,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                3&#xd;
                            ]&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193430,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                3&#xd;
                            ]&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193431,&#xd;
                            &quot;IsQuestionCorrect&quot;: 1,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                2&#xd;
                            ]&#xd;
                        }&#xd;
                    ],&#xd;
                    &quot;FeedbackViewed&quot;: true&#xd;
                },&#xd;
                {&#xd;
                    &quot;GroupType&quot;: 3,&#xd;
                    &quot;UserTimeSpent&quot;: 80,&#xd;
                    &quot;Questions&quot;: [&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193432,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193433,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193434,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193435,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        }&#xd;
                    ],&#xd;
                    &quot;FeedbackViewed&quot;: false&#xd;
                },&#xd;
                {&#xd;
                    &quot;GroupType&quot;: 3,&#xd;
                    &quot;UserTimeSpent&quot;: 7,&#xd;
                    &quot;Questions&quot;: [&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193436,&#xd;
                            &quot;IsQuestionCorrect&quot;: 1,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;4&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: [&#xd;
                                4&#xd;
                            ]&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193437,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193438,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;ArticleId&quot;: -1,&#xd;
                            &quot;QuestionId&quot;: 193439,&#xd;
                            &quot;IsQuestionCorrect&quot;: 0,&#xd;
                            &quot;BlankAnswers&quot;: [&#xd;
                                &quot;&quot;&#xd;
                            ],&#xd;
                            &quot;UserResponse&quot;: []&#xd;
                        }&#xd;
                    ],&#xd;
                    &quot;FeedbackViewed&quot;: false&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;SessionId&quot;: ${sessionId},&#xd;
    &quot;requiredEmend&quot;: false&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/saveTheAssessmentHomework</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="912299901">assessmentId</stringProp>
              <stringProp name="1942105235">sessionUserTrackingId</stringProp>
              <stringProp name="607796817">sessionId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="207928538">
                <stringProp name="1448669799">101559</stringProp>
                <stringProp name="1962870197">1058106</stringProp>
                <stringProp name="1543046">2624</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="52469">500</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">40</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="作业成绩列表" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getHomeworkScoreInfo-作业成绩列表" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="sessionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionId</stringProp>
              </elementProp>
              <elementProp name="homeworkAssessmentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${assessmentId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">homeworkAssessmentId</stringProp>
              </elementProp>
              <elementProp name="userId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${userId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userId</stringProp>
              </elementProp>
              <elementProp name="isReview" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isReview</stringProp>
              </elementProp>
              <elementProp name="sessionUserTrackingId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sessionUserTrackingId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sessionUserTrackingId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">/api/app-student/v2/sec/getHomeworkScoreInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="912299901">assessmentId</stringProp>
              <stringProp name="1942105235">sessionUserTrackingId</stringProp>
              <stringProp name="607796817">sessionId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="207928538">
                <stringProp name="1448669799">101559</stringProp>
                <stringProp name="1962870197">1058106</stringProp>
                <stringProp name="1543046">2624</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取score" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">score</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;score&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="作业答题流程" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511229907000</longProp>
        <longProp name="ThreadGroup.end_time">1511229907000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="getToken" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="1966366787">getToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取用户信息" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="23750841">工作台</stringProp>
            <stringProp name="869052411">测试计划</stringProp>
            <stringProp name="-1757215108">获取用户信息</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果获取到学生身份，则进入练习册" enabled="true">
          <stringProp name="IfController.condition">${userId} != &quot;&quot; || ${userId} != undefined</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取作业列表(未完成)" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-2112029003">获取作业列表(未完成)</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="获取作业答题详情" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="23750841">工作台</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="1281711968">获取作业答题详情</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果获取到作业列表的题目，则开始答题" enabled="true">
            <stringProp name="IfController.condition">${assessmentId} != &quot;&quot; || ${assessmentId} != undefined</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="作业答题" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="625465986">作业答题</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="查看答案" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="822643130">查看答案</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="作业成绩列表" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="23750841">工作台</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-420929272">作业成绩列表</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
